from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import List, Dict, Any
import os

from db.card_queries import get_user_cards_by_rarity, get_user_card_details, get_user_total_cards_count

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ä—Ç
class CardsStates(StatesGroup):
    viewing_rarities = State()
    viewing_cards_list = State()
    viewing_card_details = State()

# –°—Ç–∏–ª–∏ –¥–ª—è —Ä–µ–¥–∫–æ—Å—Ç–µ–π
RARITY_STYLES = {
    'common': {"emoji": "‚ö™", "name": "–û–±—ã—á–Ω—ã–µ", "button": "‚ö™ –û–±—ã—á–Ω—ã–µ", "color": "‚ö™"},
    'rare': {"emoji": "üîµ", "name": "–†–µ–¥–∫–∏–µ", "button": "üîµ –†–µ–¥–∫–∏–µ", "color": "üîµ"},
    'epic': {"emoji": "üü£", "name": "–≠–ø–∏—á–µ—Å–∫–∏–µ", "button": "üü£ –≠–ø–∏—á–µ—Å–∫–∏–µ", "color": "üü£"},
    'legendary': {"emoji": "üü°", "name": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ", "button": "üü° –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ", "color": "üü°"}
}

@router.callback_query(F.data == "my_cards")
async def show_rarity_selection(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–µ–¥–∫–æ—Å—Ç–∏ –∫–∞—Ä—Ç"""
    try:
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –ø–æ —Ä–µ–¥–∫–æ—Å—Ç—è–º
        counts = await get_user_total_cards_count(user_id)
        total_cards = sum(counts.values())
        
        # –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
        text = (
            "üé¥ <b>–ú–û–Ø –ö–û–õ–õ–ï–ö–¶–ò–Ø</b>\n\n"
            f"üìä <b>–í—Å–µ–≥–æ –∫–∞—Ä—Ç:</b> {total_cards}\n\n"
            "‚ú® <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–¥–∫–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:</b>\n\n"
        )
        
        # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=RARITY_STYLES['legendary']['button'], callback_data="cards_legendary")],
            [InlineKeyboardButton(text=RARITY_STYLES['epic']['button'], callback_data="cards_epic")],
            [InlineKeyboardButton(text=RARITY_STYLES['rare']['button'], callback_data="cards_rare")],
            [InlineKeyboardButton(text=RARITY_STYLES['common']['button'], callback_data="cards_common")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])
        
        await state.set_state(CardsStates.viewing_rarities)
        
        # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.delete()
        except:
            pass
        
        await callback.message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        print(f"Error in show_rarity_selection: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏", show_alert=True)

@router.callback_query(F.data.startswith("cards_") & ~F.data.endswith(("_prev", "_next")))
async def show_cards_list(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏"""
    try:
        user_id = callback.from_user.id
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–¥–∫–æ—Å—Ç—å –∏–∑ callback_data
        rarity = callback.data.split("_")[1]  # legendary, epic, rare, common
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —ç—Ç–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏
        cards = await get_user_cards_by_rarity(user_id, rarity)
        
        if not cards:
            style = RARITY_STYLES[rarity]
            text = (
                f"{style['emoji']} <b>–£ –≤–∞—Å –Ω–µ—Ç {style['name'].lower()} –∫–∞—Ä—Ç</b>\n\n"
                "üéØ –û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –±–æ–ª—å—à–µ –ø–∞–∫–æ–≤, —á—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é!"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì¶ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–∫–∏", callback_data="show_shop_packs")],
                [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∫–æ—Å—Ç—è–º", callback_data="my_cards")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ])
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try:
                await callback.message.delete()
            except:
                pass
            
            await callback.message.answer(text, reply_markup=keyboard, parse_mode="HTML")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        await state.update_data(
            current_rarity=rarity,
            all_cards=cards,
            current_page=0
        )
        
        await show_cards_page(callback, state)
        
    except Exception as e:
        print(f"Error in show_cards_list: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç", show_alert=True)

async def show_cards_page(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∫–∞—Ä—Ç–∞–º–∏"""
    try:
        data = await state.get_data()
        cards = data['all_cards']
        current_page = data['current_page']
        rarity = data['current_rarity']
        style = RARITY_STYLES[rarity]
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ 5 –∫–∞—Ä—Ç
        page_size = 5
        total_pages = (len(cards) + page_size - 1) // page_size
        start_idx = current_page * page_size
        end_idx = min(start_idx + page_size, len(cards))
        page_cards = cards[start_idx:end_idx]
        
        text = (
            f"{style['emoji']} <b>{style['name']} –∫–∞—Ä—Ç—ã</b>\n\n"
            f"üìä –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(cards)}\n\n"
            f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1}/{total_pages}\n"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞—Ä—Ç
        keyboard_buttons = []
        for i, card in enumerate(page_cards, start=1):
            button_text = f"{i}. {card['player_name']}"
            if card['copies_count'] > 1:
                button_text += f" (x{card['copies_count']})"
            
            keyboard_buttons.append([
                InlineKeyboardButton(text=button_text, callback_data=f"card_{card['id']}")
            ])
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        if current_page > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="cards_prev"))
        
        nav_buttons.append(InlineKeyboardButton(text=f"{current_page + 1}/{total_pages}", callback_data="cards_info"))
        
        if current_page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è", callback_data="cards_next"))
        
        if nav_buttons:
            keyboard_buttons.append(nav_buttons)
        
        # –ö–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard_buttons.extend([
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∫–æ—Å—Ç—è–º", callback_data="my_cards")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await state.set_state(CardsStates.viewing_cards_list)
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
            await callback.message.delete()
        except:
            pass
        
        await callback.message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        print(f"Error in show_cards_page: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã", show_alert=True)

@router.callback_query(F.data.in_(["cards_prev", "cards_next"]), CardsStates.viewing_cards_list)
async def navigate_cards(callback: CallbackQuery, state: FSMContext):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∫–∞—Ä—Ç"""
    try:
        data = await state.get_data()
        current_page = data['current_page']
        total_pages = (len(data['all_cards']) + 4) // 5  # 5 –∫–∞—Ä—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        
        if callback.data == "cards_prev":
            new_page = max(0, current_page - 1)
        else:
            new_page = min(current_page + 1, total_pages - 1)
        
        await state.update_data(current_page=new_page)
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ
        try:
            await callback.message.delete()
        except:
            pass
        
        await show_cards_page(callback, state)
        await callback.answer()
        
    except Exception as e:
        print(f"Error in navigate_cards: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", show_alert=True)

@router.callback_query(F.data.startswith("card_"), CardsStates.viewing_cards_list)
async def show_card_details(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π"""
    try:
        user_id = callback.from_user.id
        card_id = int(callback.data.split("_")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ
        card_details = await get_user_card_details(user_id, card_id)
        
        if not card_details:
            await callback.answer("‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        card_info = card_details['card_info']
        style = RARITY_STYLES[card_info['rarity']]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        card_text = (
            f"{style['emoji']} <b>{card_info['player_name']}</b>\n\n"
            f"üè∑Ô∏è <b>–†–µ–¥–∫–æ—Å—Ç—å:</b> {style['name']}\n"
            f"üéØ <b>–†–µ–π—Ç–∏–Ω–≥:</b> {int(card_info['weight'])}\n"
            f"üìä <b>–ö–æ–ø–∏–π —É –≤–∞—Å:</b> {card_details['copies_count']}\n"
        )
        
        if card_details['best_serial_number']:
            card_text += f"üî¢ <b>–õ—É—á—à–∏–π –Ω–æ–º–µ—Ä:</b> #{card_details['best_serial_number']}\n"
        
        if card_details['collection_name']:
            card_text += f"üèÜ <b>–ö–æ–ª–ª–µ–∫—Ü–∏—è:</b> {card_details['collection_name']}\n"
        
        card_text += f"üìÖ <b>–ü–µ—Ä–≤–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ:</b> {card_details['first_obtained'].strftime('%d.%m.%Y')}\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞, –µ—Å–ª–∏ –∏—Ö –Ω–µ–º–Ω–æ–≥–æ
        if card_details['copies_count'] <= 10:
            card_text += "üî¢ <b>–í–∞—à–∏ –Ω–æ–º–µ—Ä–∞:</b> "
            serials = [f"#{s['serial_number']}" for s in card_details['serial_numbers']]
            card_text += ", ".join(serials)
        else:
            card_text += f"üî¢ <b>–ù–æ–º–µ—Ä–∞:</b> –ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 10 –∏–∑ {card_details['copies_count']}\n"
            serials = [f"#{s['serial_number']}" for s in card_details['serial_numbers'][:10]]
            card_text += ", ".join(serials) + "..."

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–µ–¥–∫–æ—Å—Ç—å –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
        data = await state.get_data()
        current_rarity = data.get('current_rarity', card_info['rarity'])
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"cards_{current_rarity}")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])
        
        await state.set_state(CardsStates.viewing_card_details)
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.delete()
        except:
            pass
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ –∫–∞—Ä—Ç—ã
        image_path = f"players/{card_info['rarity']}/{card_info['uniq_name']}.jpg"
        
        if os.path.exists(image_path):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
            photo = FSInputFile(image_path)
            await callback.message.answer_photo(
                photo=photo,
                caption=card_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç
            await callback.message.answer(
                text=card_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
    except Exception as e:
        print(f"Error in show_card_details: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã", show_alert=True)

@router.callback_query(F.data.startswith("cards_"), CardsStates.viewing_card_details)
async def back_to_cards_list(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ä—Ç –∏–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–¥–∫–æ—Å—Ç—å –∏–∑ callback_data
        parts = callback.data.split("_")
        if len(parts) >= 2:
            rarity = parts[1]
            await state.update_data(current_rarity=rarity)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ–π
            try:
                await callback.message.delete()
            except:
                pass
            
            await show_cards_list(callback, state)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
            
    except Exception as e:
        print(f"Error in back_to_cards_list: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞", show_alert=True)

@router.callback_query(F.data == "back_to_menu", CardsStates.viewing_card_details)
async def back_to_menu_from_cards(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ä—Ç"""
    await state.clear()
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ–π
        await callback.message.delete()
    except:
        pass
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
        from handlers.main_menu import show_menu
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
        await show_menu(callback, state)
    except Exception as e:
        print(f"Error returning to menu from cards: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é", show_alert=True)

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu_general(callback: CallbackQuery, state: FSMContext):
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    current_state = await state.get_state()
    
    if current_state == CardsStates.viewing_card_details:
        # –ï—Å–ª–∏ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ä—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        await back_to_menu_from_cards(callback, state)
    else:
        # –î–ª—è –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π - –æ–±—ã—á–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç
        await state.clear()
        try:
            # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.delete()
        except:
            pass
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
            from handlers.main_menu import show_menu
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
            await show_menu(callback, state)
        except Exception as e:
            print(f"Error returning to menu: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é", show_alert=True)