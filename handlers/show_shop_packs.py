from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile  
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import random
from typing import List, Dict, Any
from datetime import datetime
import traceback

from db.pack_queries import *
from db.user_queries import *
from db.card_queries import *

from handlers.main_menu import show_menu
import os
import asyncio

router = Router()

# –°—Ç–∏–ª–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
class PackDesign:
    PACK_STYLES = {
        'standard': {
            'icon': 'üì¶',
            'color': 'üîµ',
            'name': '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π',
            'header': 'üõçÔ∏è –°–¢–ê–ù–î–ê–†–¢–ù–´–ï –ü–ê–ö–ò'
        }
    }
    
    RARITY_STYLES = {
        'common': {'emoji': '‚ö™', 'name': '–û–±—ã—á–Ω–∞—è', 'color': '‚ö™'},
        'rare': {'emoji': 'üîµ', 'name': '–†–µ–¥–∫–∞—è', 'color': 'üîµ'},
        'epic': {'emoji': 'üü£', 'name': '–≠–ø–∏—á–µ—Å–∫–∞—è', 'color': 'üü£'},
        'legendary': {'emoji': 'üü°', 'name': '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è', 'color': 'üü°'}
    }

class PackStates(StatesGroup):
    viewing_packs = State()
    viewing_cards = State()
    confirm_purchase = State()

async def create_pack_card(pack: Dict, user_balance: int, user_id: int = None) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É –ø–∞–∫–∞"""
    try:
        print(f"[{datetime.now()}] –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–∞–∫–∞ {pack.get('id', 'unknown')} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        style = PackDesign.PACK_STYLES.get(pack['pack_type'], PackDesign.PACK_STYLES['standard'])
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–∫–∞
        header = f"{style['icon']} <b>{pack['name']}</b>\n"
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        description = f"<i>{pack['description']}</i>\n\n" if pack.get('description') else "\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–∞—Ö
        content = f"üé¥ <b>–ö–∞—Ä—Ç –≤ –ø–∞–∫–µ:</b> {pack['cards_amount']}\n"
        
        # –®–∞–Ω—Å—ã —Ä–µ–¥–∫–æ—Å—Ç–µ–π –≤ –≤–∏–¥–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤
        chances = "üé≤ <b>–®–∞–Ω—Å—ã —Ä–µ–¥–∫–æ—Å—Ç–µ–π:</b>\n"
        rarity_chances = [
            ('common', pack['common_chance']),
            ('rare', pack['rare_chance']), 
            ('epic', pack['epic_chance']),
            ('legendary', pack['legendary_chance'])
        ]
        
        for rarity, chance in rarity_chances:
            if chance > 0:
                bar = "‚ñà" * max(1, round(chance / 10))
                spaces = " " * (10 - len(bar))
                chances += f"{PackDesign.RARITY_STYLES[rarity]['emoji']} {bar}{spaces} {chance}%\n"
        
        # –°—Ç–æ–∏–º–æ—Å—Ç—å –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        price_section = ""
        if pack['cost'] == 0:
            price_section = "üí∏ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> –ë–ï–°–ü–õ–ê–¢–ù–û\n"
            if user_id:
                can_open, time_left = await can_open_free_pack(user_id)
                if can_open:
                    status = "üü¢ <b>–ì–æ—Ç–æ–≤ –∫ –æ—Ç–∫—Ä—ã—Ç–∏—é!</b>"
                else:
                    hours = int(time_left // 3600)
                    mins = int((time_left % 3600) // 60)
                    status = f"‚è∞ <b>–î–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑:</b> {hours}—á {mins}–º"
            else:
                status = "üü¢ <b>–ì–æ—Ç–æ–≤ –∫ –æ—Ç–∫—Ä—ã—Ç–∏—é!</b>"
        else:
            price_section = f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {pack['cost']} –º–æ–Ω–µ—Ç\n"
            can_afford = user_balance >= pack['cost']
            status = "üü¢ <b>–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏</b>" if can_afford else "üî¥ <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç</b>"
        
        # –°–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
        card_text = (
            f"{header}"
            f"{description}"
            f"{content}\n"
            f"{chances}\n"
            f"{price_section}\n"
            f"{status}"
        )
        return card_text
        
    except Exception as e:
        print(f"[{datetime.now()}] –û–®–ò–ë–ö–ê —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–∞–∫–∞: {e}")
        traceback.print_exc()
        return "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–∞–∫–∞"

async def create_packs_keyboard(
    packs: List[Dict], 
    current_index: int,
    user_id: int = None,
    show_collections: bool = False
) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–∞–∫–æ–≤"""
    try:
        
        current_pack = packs[current_index]
        user = await get_user_by_id(user_id) if user_id else None
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        navigation_buttons = []
        if len(packs) > 1:
            navigation_buttons = [
                InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"pack_prev_{current_index}"),
                InlineKeyboardButton(text=f"üìÑ {current_index + 1}/{len(packs)}", callback_data="pack_info"),
                InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"pack_next_{current_index}")
            ]
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
        if current_pack['cost'] == 0:
            can_open, _ = await can_open_free_pack(user_id) if user_id else (True, 0)
            action_text = "üéÅ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–∫" if can_open else "‚è≥ –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
            callback_data = f"pack_open_{current_pack['id']}" if can_open else "pack_cant_open"
        else:
            can_afford = user and user['balance'] >= current_pack['cost']
            action_text = "üíé –ö—É–ø–∏—Ç—å –ø–∞–∫" if can_afford else "üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ"
            callback_data = f"pack_confirm_{current_pack['id']}" if can_afford else "pack_cant_buy"
        
        action_button = [InlineKeyboardButton(text=action_text, callback_data=callback_data)]
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        back_button = [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        
        # –°–æ–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard_rows = []
        if navigation_buttons:
            keyboard_rows.append(navigation_buttons)
        keyboard_rows.append(action_button)
        keyboard_rows.append(back_button)

        return InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
        
    except Exception as e:
        print(f"[{datetime.now()}] –û–®–ò–ë–ö–ê —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–∞–∫–æ–≤: {e}")
        traceback.print_exc()
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])

async def create_confirmation_keyboard(pack_id) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏"""
    try:
        return InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, –ø–æ–∫—É–ø–∞—é!", callback_data=f"pack_buy_{pack_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="pack_cancel")
            ],
            [
                InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –ø–∞–∫–∞–º", callback_data="back_to_packs")
            ]
        ])
    except Exception as e:
        print(f"[{datetime.now()}] –û–®–ò–ë–ö–ê —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
        raise

@router.callback_query(F.data == "show_shop_packs")
async def show_packs_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–∞–∫–æ–≤"""
    user_id = callback.from_user.id
    
    try:
        user = await get_user_by_id(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–∏
        all_packs = await get_available_packs(user_id)
        print(f"[{datetime.now()}] –ü–æ–ª—É—á–µ–Ω–æ {len(all_packs)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –æ–±—ã—á–Ω—ã–µ –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ
        standard_packs = [p for p in all_packs if p['pack_type'] == 'standard']
        collection_packs = [p for p in all_packs if p['pack_type'] == 'collection']
        
        await state.update_data(
            standard_packs=standard_packs,
            collection_packs=collection_packs,
            current_view='standard',
            current_index=0
        )
        
        # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —ç—Ç–æ callback
            if hasattr(callback, 'message'):
                await callback.message.delete()
                print(f"[{datetime.now()}] –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
        except Exception as e:
            print(f"[{datetime.now()}] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        temp_message = await callback.message.answer("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞...")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞–∫–æ–≤
        await display_current_pack(callback, state, temp_message)
        
    except Exception as e:
        print(f"[{datetime.now()}] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ show_packs_menu: {e}")
        traceback.print_exc()
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞", show_alert=True)

async def display_current_pack(callback: CallbackQuery, state: FSMContext, message_to_edit=None):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø–∞–∫"""
    user_id = callback.from_user.id
    
    try:
        data = await state.get_data()
        user = await get_user_by_id(user_id)
        
        current_view = data.get('current_view', 'standard')
        current_index = data.get('current_index', 0)
        
        packs = data['standard_packs'] if current_view == 'standard' else data['collection_packs']
        style = PackDesign.PACK_STYLES.get(current_view, PackDesign.PACK_STYLES['standard'])
        
        print(f"[{datetime.now()}] –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞–∫–∞ {current_index} —Ç–∏–ø–∞ {current_view} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        if not packs:
            message = (
                f"{style['icon']} <b>{style['header']}</b>\n\n"
                "üì≠ <b>–ü–∞–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>\n\n"
                "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–æ–≤ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞.\n"
                "–ù–æ–≤—ã–µ –ø–∞–∫–∏ –ø–æ—è–≤—è—Ç—Å—è —Å–∫–æ—Ä–æ! üéØ"
            )
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì¶ –ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –ø–∞–∫–∞–º", callback_data="toggle_collections")],
                [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ])
            
            if message_to_edit:
                await message_to_edit.edit_text(message, reply_markup=keyboard, parse_mode="HTML")
            else:
                await callback.message.edit_text(message, reply_markup=keyboard, parse_mode="HTML")
            return
        
        current_pack = packs[current_index]
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø–∞–∫–∞
        pack_card = await create_pack_card(current_pack, user['balance'], user_id)
        
        # –ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—Ä–∞—Å–∏–≤—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        full_message = (
            f"{style['icon']} <b>{style['header']}</b>\n\n"
            f"üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {user['balance']} –º–æ–Ω–µ—Ç\n\n"
            f"{pack_card}"
        )
        
        keyboard = await create_packs_keyboard(
            packs, current_index, user_id, 
            show_collections=(current_view == 'collection')
        )
        
        if message_to_edit:
            await message_to_edit.edit_text(
                text=full_message,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            await callback.message.edit_text(
                text=full_message,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        
    except Exception as e:
        print(f"[{datetime.now()}] –û–®–ò–ë–ö–ê –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞–∫–∞: {e}")
        traceback.print_exc()
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("pack_confirm_"))
async def confirm_pack_purchase(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –ø–∞–∫–∞"""
    user_id = callback.from_user.id
    
    try:
        pack_id_str = callback.data.split("_")[2]
        print(f"[{datetime.now()}] –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –ø–∞–∫–∞ {pack_id_str} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø pack_id
        if pack_id_str.startswith('collection'):
            pack_id = pack_id_str
        else:
            pack_id = int(pack_id_str)
            
        user = await get_user_by_id(user_id)
        pack = await get_pack_by_id(pack_id)
        
        if not pack:
            print(f"[{datetime.now()}] –ü–∞–∫ {pack_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await callback.answer("‚ùå –ü–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        confirmation_text = (
            f"üõí <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏</b>\n\n"
            f"üì¶ <b>–ü–∞–∫:</b> {pack['name']}\n"
            f"üí≥ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {pack['cost']} –º–æ–Ω–µ—Ç\n"
            f"üé¥ <b>–ö–∞—Ä—Ç –≤ –ø–∞–∫–µ:</b> {pack['cards_amount']}\n\n"
            f"üí∞ <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> {user['balance']} –º–æ–Ω–µ—Ç\n"
            f"üí∏ <b>–ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏:</b> {user['balance'] - pack['cost']} –º–æ–Ω–µ—Ç\n\n"
            f"<i>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —ç—Ç–æ—Ç –ø–∞–∫?</i>"
        )
        
        keyboard = await create_confirmation_keyboard(pack_id)
        
        await callback.message.edit_text(
            text=confirmation_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        await state.set_state(PackStates.confirm_purchase)
        
    except Exception as e:
        print(f"[{datetime.now()}] –û–®–ò–ë–ö–ê –≤ confirm_pack_purchase: {e}")
        traceback.print_exc()
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", show_alert=True)

@router.callback_query(F.data.startswith("pack_buy_"))
async def process_pack_purchase(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–∞–∫–∞"""
    user_id = callback.from_user.id
    
    try:
        pack_id_str = callback.data.split("_")[2]
        print(f"[{datetime.now()}] –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–∞–∫–∞ {pack_id_str} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø pack_id
        if pack_id_str.startswith('collection'):
            pack_id = pack_id_str
        else:
            pack_id = int(pack_id_str)
            
        await open_pack(callback, state, pack_id)
        
    except Exception as e:
        print(f"[{datetime.now()}] –û–®–ò–ë–ö–ê –≤ process_pack_purchase: {e}")
        traceback.print_exc()
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ", show_alert=True)
        await state.clear()

@router.callback_query(F.data == "pack_cancel")
async def cancel_purchase(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏"""
    user_id = callback.from_user.id
    print(f"[{datetime.now()}] –û—Ç–º–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
    
    await callback.answer("‚ùå –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await state.set_state(PackStates.viewing_packs)
    await display_current_pack(callback, state)

@router.callback_query(F.data.startswith("pack_"))
async def handle_pack_actions(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–∞–∫–∞–º–∏"""
    user_id = callback.from_user.id
    action = callback.data.split("_")[1]
    
    print(f"[{datetime.now()}] –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø–∞–∫–∞: {callback.data} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        data = await state.get_data()
        current_view = data.get('current_view', 'standard')
        current_index = data.get('current_index', 0)
        
        packs = data['standard_packs'] if current_view == 'standard' else data['collection_packs']
        
        if action == "prev":
            new_index = (current_index - 1) % len(packs)
            await state.update_data(current_index=new_index)
            await display_current_pack(callback, state)
            print(f"[{datetime.now()}] –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –ø–∞–∫—É: {new_index}")
            
        elif action == "next":
            new_index = (current_index + 1) % len(packs)
            await state.update_data(current_index=new_index)
            await display_current_pack(callback, state)
            print(f"[{datetime.now()}] –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–∞–∫—É: {new_index}")
            
        elif action == "open":
            pack_id = int(callback.data.split("_")[2])
            print(f"[{datetime.now()}] –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–∫–∞ {pack_id}")
            await open_pack(callback, state, pack_id)
            
        elif action == "cant":
            if callback.data == "pack_cant_open":
                print(f"[{datetime.now()}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–∞–∫")
                await callback.answer("‚è≥ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–∞–∫ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–∑–∂–µ!", show_alert=True)
            else:
                print(f"[{datetime.now()}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –∫—É–ø–∏—Ç—å –ø–∞–∫ –±–µ–∑ —Å—Ä–µ–¥—Å—Ç–≤")
                await callback.answer("üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏!", show_alert=True)
        
        await callback.answer()
        
    except Exception as e:
        print(f"[{datetime.now()}] –û–®–ò–ë–ö–ê –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è –ø–∞–∫–∞: {e}")
        traceback.print_exc()
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)

@router.callback_query(F.data == "toggle_collections")
async def toggle_collections_view(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–º–∏ –ø–∞–∫–∞–º–∏"""
    user_id = callback.from_user.id
    
    try:
        data = await state.get_data()
        current_view = data.get('current_view', 'standard')
        
        new_view = 'collection' if current_view == 'standard' else 'standard'
        await state.update_data(current_view=new_view, current_index=0)
        
        print(f"[{datetime.now()}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ–∫–ª—é—á–∏–ª –≤–∏–¥ –ø–∞–∫–æ–≤ —Å {current_view} –Ω–∞ {new_view}")
        
        await display_current_pack(callback, state)
        await callback.answer(f"üì¶ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ {new_view} –ø–∞–∫–∏")
        
    except Exception as e:
        print(f"[{datetime.now()}] –û–®–ò–ë–ö–ê –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∞ –ø–∞–∫–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è", show_alert=True)

@router.callback_query(F.data == "back_to_packs")
async def back_to_packs_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é –ø–∞–∫–æ–≤"""
    user_id = callback.from_user.id
    print(f"[{datetime.now()}] –í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é –ø–∞–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
    
    await state.set_state(PackStates.viewing_packs)
    await display_current_pack(callback, state)

async def open_pack(callback: CallbackQuery, state: FSMContext, pack_id: int):
    """–ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–∫–∞ —Å –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ–º –æ—á–∫–æ–≤"""
    user_id = callback.from_user.id
    
    print(f"[{datetime.now()}] –ù–∞—á–∞–ª–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–∫–∞ {pack_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        user = await get_user_by_id(user_id)
        pack = await get_pack_by_id(pack_id)
        
        if not pack:
            print(f"[{datetime.now()}] –ü–∞–∫ {pack_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏")
            await callback.answer("‚ùå –ü–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏—è
        if pack['cost'] == 0:
            can_open, time_left = await can_open_free_pack(user_id)
            if not can_open:
                hours = int(time_left // 3600)
                mins = int((time_left % 3600) // 60)
                print(f"[{datetime.now()}] –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –æ—Å—Ç–∞–ª–æ—Å—å {hours}—á {mins}–º")
                await callback.answer(f"‚è≥ –î–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ {hours}—á {mins}–º", show_alert=True)
                return
        
        if pack['cost'] > 0 and user['balance'] < pack['cost']:
            print(f"[{datetime.now()}] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: –±–∞–ª–∞–Ω—Å {user['balance']}, —Å—Ç–æ–∏–º–æ—Å—Ç—å {pack['cost']}")
            await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç", show_alert=True)
            return
        
        # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        if pack['cost'] > 0:
            await update_user_balance(user_id, -pack['cost'])
            print(f"[{datetime.now()}] –°–ø–∏—Å–∞–Ω–æ {pack['cost']} –º–æ–Ω–µ—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
            await update_last_pack_time(user_id)
            print(f"[{datetime.now()}] –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–∞–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç
        cards = await generate_pack_cards(pack)
        print(f"[{datetime.now()}] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(cards)} –∫–∞—Ä—Ç –¥–ª—è –ø–∞–∫–∞ {pack_id}")
        
        if not cards:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏ –µ—Å–ª–∏ –∫–∞—Ä—Ç—ã –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å
            if pack['cost'] > 0:
                await update_user_balance(user_id, pack['cost'])
                print(f"[{datetime.now()}] –í–æ–∑–≤—Ä–∞—â–µ–Ω—ã {pack['cost']} –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç", show_alert=True)
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        card_ids = [card['id'] for card in cards]
        add_result = await add_cards_to_user(user_id, card_ids)
        serial_numbers = add_result['serial_numbers']
        print(f"[{datetime.now()}] –ö–∞—Ä—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}, —Å–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: {serial_numbers}")
        
        # –ù–ê–ß–ò–°–õ–Ø–ï–ú –û–ß–ö–ò –ó–ê –ö–ê–†–¢–´ - –ü–ï–†–ï–ú–ï–©–ï–ù–û –í –ù–ê–ß–ê–õ–û!
        total_score_earned = 0
        score_details = []
        
        print(f"[{datetime.now()}] –ù–ê–ß–ê–õ–û –†–ê–°–ß–ï–¢–ê –û–ß–ö–û–í:")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∫–∞–∑–∞
        rarity_order = {'common': 1, 'rare': 2, 'epic': 3, 'legendary': 4}
        sorted_cards = sorted(cards, key=lambda x: rarity_order.get(x['rarity'], 0))
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—á–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã
        for card in sorted_cards:
            score_for_card = calculate_score_for_card(card)
            total_score_earned += score_for_card
            score_details.append({
                'player_name': card['player_name'],
                'rarity': card['rarity'],
                'score': score_for_card
            })
            print(f"  –ö–∞—Ä—Ç–∞: {card['player_name']} ({card['rarity']}) = {score_for_card} –æ—á–∫–æ–≤")
        
        print(f"[{datetime.now()}] –ò–¢–û–ì–û –û–ß–ö–û–í: {total_score_earned}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –¢–ï–ü–ï–†–¨ –ü–û–°–õ–ï –†–ê–°–ß–ï–¢–ê –û–ß–ö–û–í
        if total_score_earned > 0:
            update_result = await update_user_score(user_id, total_score_earned)
            if update_result:
                print(f"[{datetime.now()}] –ù–∞—á–∏—Å–ª–µ–Ω–æ {total_score_earned} –æ—á–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –ù–æ–≤—ã–π —Å—á–µ—Ç: {update_result['score']}")
            else:
                print(f"[{datetime.now()}] –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
            print(f"[{datetime.now()}] –ù–µ—Ç –æ—á–∫–æ–≤ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ
        await log_pack_opening(user_id, pack['id'], card_ids)
        print(f"[{datetime.now()}] –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–∫–∞ {pack_id} –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ª–æ–≥–∏")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await update_collection_stats_by_cards(card_ids)
        print(f"[{datetime.now()}] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–∞—Ö –∏ –æ—á–∫–∞—Ö
        card_infos = []
        for i, card in enumerate(sorted_cards):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –æ—á–∫–∏ —á—Ç–æ —É–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞–ª–∏
            card_score = score_details[i]['score']
            card_info = {
                'card': card,
                'serial_number': serial_numbers.get(card['id'], {}).get('serial_number', 0),
                'collection_name': await get_collection_name(card.get('collection_id')),
                'score': card_score
            }
            card_infos.append(card_info)
        
        # –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–£–ú–ú–´
        calculated_total = sum(info['score'] for info in card_infos)
        if calculated_total != total_score_earned:
            print(f"[{datetime.now()}] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ —Å—É–º–º–µ –æ—á–∫–æ–≤! calculated_total={calculated_total}, total_score_earned={total_score_earned}")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–Ω—É—é —Å—É–º–º—É –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            total_score_earned = calculated_total
        
        await state.set_state(PackStates.viewing_cards)
        await state.update_data(
            card_infos=card_infos,
            current_card_index=0,
            pack_name=pack['name'],
            total_score_earned=total_score_earned,
            score_details=score_details
        )
        
        await show_opened_card(callback, state)
        
    except Exception as e:
        print(f"[{datetime.now()}] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–∫–∞: {e}")
        traceback.print_exc()
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–∫–∞", show_alert=True)

def calculate_score_for_card(card: Dict) -> int:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –∑–∞ –∫–∞—Ä—Ç—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–¥–∫–æ—Å—Ç–∏"""
    rarity = card.get('rarity', 'common')
    
    # –°—Ç—Ä–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –æ—á–∫–æ–≤ –ø–æ —Ä–µ–¥–∫–æ—Å—Ç—è–º
    score_ranges = {
        'common': (5, 10),      # –æ–±—ã—á–Ω—ã–π: —Å—Ç—Ä–æ–≥–æ 5-10 –æ—á–∫–æ–≤
        'rare': (10, 15),       # —Ä–µ–¥–∫–∏–π: —Å—Ç—Ä–æ–≥–æ 10-15 –æ—á–∫–æ–≤  
        'epic': (15, 20),       # —ç–ø–∏—á–µ—Å–∫–∏–π: —Å—Ç—Ä–æ–≥–æ 15-20 –æ—á–∫–æ–≤
        'legendary': (20, 25)   # –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π: —Å—Ç—Ä–æ–≥–æ 20-25 –æ—á–∫–æ–≤
    }
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏
    if rarity not in score_ranges:
        print(f"[{datetime.now()}] –í–ù–ò–ú–ê–ù–ò–ï: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å '{rarity}', –∏—Å–ø–æ–ª—å–∑—É–µ–º common")
        rarity = 'common'
    
    min_score, max_score = score_ranges[rarity]
    
    # –°–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ)
    score = random.randint(min_score, max_score)
    
    # –î–ï–ë–ê–ì: –ª–æ–≥–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –æ—á–∫–æ–≤
    print(f"[{datetime.now()}] –†–∞—Å—á–µ—Ç –æ—á–∫–æ–≤: {card['player_name']} ({rarity}) -> {min_score}-{max_score} = {score} –æ—á–∫–æ–≤")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    if not (min_score <= score <= max_score):
        print(f"[{datetime.now()}] –û–®–ò–ë–ö–ê: –æ—á–∫–∏ {score} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ {min_score}-{max_score} –¥–ª—è —Ä–µ–¥–∫–æ—Å—Ç–∏ {rarity}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        return min_score
    
    return score

async def show_opened_card(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—É—é –∫–∞—Ä—Ç—É —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã–º–∏ –æ—á–∫–∞–º–∏"""
    user_id = callback.from_user.id
    
    try:
        data = await state.get_data()
        card_infos = data['card_infos']
        current_index = data['current_card_index']
        pack_name = data['pack_name']
        total_score_earned = data.get('total_score_earned', 0)
        
        current_info = card_infos[current_index]
        card = current_info['card']
        rarity_style = PackDesign.RARITY_STYLES.get(card['rarity'], PackDesign.RARITY_STYLES['common'])
        
        print(f"[{datetime.now()}] –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã {current_index + 1}/{len(card_infos)} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Ä–µ–¥–∫–æ—Å—Ç—å: {card['rarity']}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ
        image_path = f"players/{card['rarity']}/{card['uniq_name']}.jpg"
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—á–∫–∞—Ö
        card_text = (
            f"üéâ <b>–ù–û–í–ê–Ø –ö–ê–†–¢–ê!</b>\n\n"
            f"üì¶ <b>–ü–∞–∫:</b> {pack_name}\n"
            f"üé¥ <b>–ö–∞—Ä—Ç–∞ {current_index + 1}/{len(card_infos)}</b>\n\n"
            f"{rarity_style['color']} {rarity_style['emoji']} <b>{card['player_name']}</b>\n"
            f"{rarity_style['color']} üè∑Ô∏è {rarity_style['name']}\n"
            f"{rarity_style['color']} üî¢ #{current_info['serial_number']:06d}\n"
            f"{rarity_style['color']} üéØ {int(card['weight'])}\n"
            f"{rarity_style['color']} ‚≠ê <b>–û—á–∫–∏:</b> +{current_info['score']}\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        if current_info['collection_name']:
            card_text += f"\nüèÜ <b>–ö–æ–ª–ª–µ–∫—Ü–∏—è:</b> {current_info['collection_name']}"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—á–∫–æ–≤ —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–∞—Ä—Ç–µ
        if current_index == len(card_infos) - 1 and total_score_earned > 0:
            # –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
            calculated_total = sum(info['score'] for info in card_infos)
            card_text += f"\n\nüèÖ <b>–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—á–∫–æ–≤ –∑–∞ –ø–∞–∫:</b> +{calculated_total}"
            
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard_rows = []
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –µ—Å–ª–∏ –∫–∞—Ä—Ç –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π
        if len(card_infos) > 1:
            nav_buttons = []
            if current_index > 0:
                nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="card_prev"))
            nav_buttons.append(InlineKeyboardButton(text=f"{current_index + 1}/{len(card_infos)}", callback_data="card_info"))
            if current_index < len(card_infos) - 1:
                nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data="card_next"))
            keyboard_rows.append(nav_buttons)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        action_buttons = []
        if current_index == len(card_infos) - 1:
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –µ—â–µ –ø–∞–∫–æ–≤
            action_buttons.append(InlineKeyboardButton(text="üì¶ –û—Ç–∫—Ä—ã—Ç—å –µ—â—ë –ø–∞–∫–æ–≤", callback_data="show_shop_packs"))
        else:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–π
            action_buttons.append(InlineKeyboardButton(text="‚è© –°–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–∞", callback_data="card_next"))
        
        keyboard_rows.append(action_buttons)
        keyboard_rows.append([InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu_from_shop")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
        
        # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.delete()
            print(f"[{datetime.now()}] –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ–π —É–¥–∞–ª–µ–Ω–æ")
        except Exception as e:
            print(f"[{datetime.now()}] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
        if os.path.exists(image_path):
            photo = FSInputFile(image_path)
            await callback.message.answer_photo(
                photo=photo,
                caption=card_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            await callback.message.answer(
                text=card_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
    except Exception as e:
        print(f"[{datetime.now()}] –û–®–ò–ë–ö–ê –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã: {e}")
        traceback.print_exc()
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã", show_alert=True)

@router.callback_query(F.data.in_(["card_prev", "card_next", "card_info"]))
async def navigate_opened_cards(callback: CallbackQuery, state: FSMContext):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –æ—Ç–∫—Ä—ã—Ç—ã–º –∫–∞—Ä—Ç–∞–º —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∞—Ä—Ç–∏–Ω–æ–∫"""
    user_id = callback.from_user.id
    
    try:
        data = await state.get_data()
        current_index = data['current_card_index']
        card_infos = data['card_infos']
        
        print(f"[{datetime.now()}] –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–∞—Ä—Ç–∞–º: {callback.data}, —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å: {current_index}")
        
        if callback.data == "card_prev":
            new_index = max(0, current_index - 1)
        elif callback.data == "card_next":
            new_index = min(len(card_infos) - 1, current_index + 1)
        else:  # card_info
            await callback.answer(f"–ö–∞—Ä—Ç–∞ {current_index + 1} –∏–∑ {len(card_infos)}")
            return
        
        await state.update_data(current_card_index=new_index)
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ
        try:
            await callback.message.delete()
        except Exception as e:
            print(f"[{datetime.now()}] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}")
        
        await show_opened_card(callback, state)
        await callback.answer()
        
    except Exception as e:
        print(f"[{datetime.now()}] –û–®–ò–ë–ö–ê –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ä—Ç–∞–º: {e}")
        traceback.print_exc()
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", show_alert=True)

@router.callback_query(F.data == "show_shop_packs")
async def show_shop_packs_from_anywhere(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    user_id = callback.from_user.id
    current_state = await state.get_state()
    
    print(f"[{datetime.now()}] –ó–∞–ø—Ä–æ—Å –º–∞–≥–∞–∑–∏–Ω–∞ –ø–∞–∫–æ–≤ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è {current_state} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    if current_state == PackStates.viewing_cards:
        # –ï—Å–ª–∏ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ä—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        await back_to_shop_from_cards(callback, state)
    else:
        # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        await show_packs_menu(callback, state)

@router.callback_query(F.data == "show_shop_packs", PackStates.viewing_cards)
async def back_to_shop_from_cards(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–∞–≥–∞–∑–∏–Ω –ø–∞–∫–æ–≤ –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ä—Ç"""
    user_id = callback.from_user.id
    print(f"[{datetime.now()}] –í–æ–∑–≤—Ä–∞—Ç –≤ –º–∞–≥–∞–∑–∏–Ω –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ä—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    await state.set_state(PackStates.viewing_packs)
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ–π (–µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å)
        await callback.message.delete()
    except Exception as e:
        print(f"[{datetime.now()}] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ–π: {e}")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–∞–≥–∞–∑–∏–Ω–æ–º
        await show_packs_menu(callback, state)
    except Exception as e:
        print(f"[{datetime.now()}] –û–®–ò–ë–ö–ê –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–∞–≥–∞–∑–∏–Ω: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞", show_alert=True)

@router.callback_query(F.data == "back_to_menu_from_shop", PackStates.viewing_cards)
async def back_to_menu_from_cards(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ä—Ç —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è"""
    user_id = callback.from_user.id
    print(f"[{datetime.now()}] –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ä—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ–π
        try:
            await callback.message.delete()
            print(f"[{datetime.now()}] –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ–π —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")
        except Exception as e:
            print(f"[{datetime.now()}] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ–π: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å, –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            try:
                await callback.message.edit_text("üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é...")
            except:
                pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
        await show_menu(callback, state)
        
    except Exception as e:
        print(f"[{datetime.now()}] –û–®–ò–ë–ö–ê –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–Ω—é –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.answer("üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
            await show_menu(callback, state)
        except Exception as final_error:
            print(f"[{datetime.now()}] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {final_error}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é", show_alert=True)
