from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta
from aiogram.utils.markdown import html_decoration as hd

from db.user_queries import *

router = Router()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
CHANNELS_CONFIG = {
    -1002655732796: {  # ID –∫–∞–Ω–∞–ª–∞ 1
        'name': 'üì¢ –§—É—Ç–±–æ–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏',
        'url': 'https://t.me/RonaldoOrMessiQuest'
    },
    -1002459798852: {  # ID –∫–∞–Ω–∞–ª–∞ 2
        'name': 'üéÆ –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª', 
        'url': 'https://t.me/FootyCardsChannel'
    }
}

async def check_channels_subscription(user_id: int, bot: Bot) -> tuple[bool, list]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–≤—Å–µ_–ª–∏_–ø–æ–¥–ø–∏—Å–∫–∏_–∞–∫—Ç–∏–≤–Ω—ã, —Å–ø–∏—Å–æ–∫_–Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö_–∫–∞–Ω–∞–ª–æ–≤)
    """
    not_subscribed = []
    
    for channel_id, channel_info in CHANNELS_CONFIG.items():
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
            member = await bot.get_chat_member(chat_id=channel_id, user_id=user_id)
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –∏–ª–∏ –ø–æ–∫–∏–Ω—É–ª –∫–∞–Ω–∞–ª
            if member.status in ['left', 'kicked']:
                not_subscribed.append((channel_id, channel_info))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
            not_subscribed.append((channel_id, channel_info))
    
    return len(not_subscribed) == 0, not_subscribed

async def create_subscription_keyboard(not_subscribed_channels: list) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã"""
    buttons = []
    
    for channel_id, channel_info in not_subscribed_channels:
        buttons.append([
            InlineKeyboardButton(
                text=f"üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {channel_info['name']}",
                url=channel_info['url']
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    buttons.append([
        InlineKeyboardButton(
            text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!",
            callback_data="check_subscription"
        )
    ])
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    buttons.append([
        InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
            callback_data="back_to_menu"
        )
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@router.callback_query(F.data == "open_menu")
async def cmd_castle(message: Message, state: FSMContext):
    await show_menu(message, state)

async def show_menu(message: Message | CallbackQuery, state: FSMContext):
    user_id = message.from_user.id
    text = "üìã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¶ –ú–∞–≥–∞–∑–∏–Ω –ø–∞–∫–æ–≤", callback_data="show_shop_packs")],
        [InlineKeyboardButton(text="üÉè –ú–æ–∏ –∫–∞—Ä—Ç—ã", callback_data="my_cards")],
        [InlineKeyboardButton(text="‚öîÔ∏è –ò–≥—Ä–æ–≤—ã–µ —Ä–µ–∂–∏–º—ã", callback_data="play_menu")],
        [InlineKeyboardButton(text="üè™ –ú–∞—Ä–∫–µ—Ç", callback_data="market_menu")],
        [InlineKeyboardButton(text="üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="donate_menu")]
    ])
    
    if isinstance(message, CallbackQuery):
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.message.edit_text(text, reply_markup=keyboard)
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await message.message.answer(text, reply_markup=keyboard)
    else:
        await message.answer(text, reply_markup=keyboard)

@router.callback_query(F.data == "play_menu")
async def play_menu(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ –∏–≥—Ä–æ–≤—ã–µ —Ä–µ–∂–∏–º—ã"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª—ã
    is_subscribed, not_subscribed = await check_channels_subscription(callback.from_user.id, bot)
    
    if not is_subscribed:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        channels_list = "\n".join([
            f"‚Ä¢ {channel_info['name']}" 
            for _, channel_info in not_subscribed
        ])
        
        subscription_message = (
            "üéÆ <b>–î–æ—Å—Ç—É–ø –∫ –∏–≥—Ä–æ–≤—ã–º —Ä–µ–∂–∏–º–∞–º</b>\n\n"
            "–ß—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å –≤ –Ω–∞—à–∏ –∏–≥—Ä—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:\n\n"
            f"{channels_list}\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!</b>"
        )
        
        keyboard = await create_subscription_keyboard(not_subscribed)
        
        await callback.message.edit_text(
            text=subscription_message,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        return
    
    # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ —Ä–µ–∂–∏–º—ã
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí™ –§—É—Ç–±–æ–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="open_training")],
        [InlineKeyboardButton(text="üé≤ –§—É—Ç–±–æ–ª—å–Ω—ã–µ –∫–æ—Å—Ç–∏", callback_data="open_footballDice")],
        [InlineKeyboardButton(text="üÉè –ë–ª—ç–∫ –î–∂–µ–∫", callback_data="open_football21")],
        [InlineKeyboardButton(text="üé∞ –°–ª–æ—Ç-–º–∞—à–∏–Ω–∞", callback_data="open_slots")],
        [InlineKeyboardButton(text="üéØ –§—É—Ç–±–æ–ª—å–Ω–∞—è —Ä—É–ª–µ—Ç–∫–∞", callback_data="open_roulette")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])

    await callback.message.edit_text("‚öîÔ∏è –ò–≥—Ä–æ–≤—ã–µ —Ä–µ–∂–∏–º—ã:", reply_markup=keyboard)

@router.callback_query(F.data == "check_subscription")
async def check_subscription_handler(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è'"""
    
    is_subscribed, not_subscribed = await check_channels_subscription(callback.from_user.id, bot)
    
    if is_subscribed:
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ —Ä–µ–∂–∏–º—ã
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí™ –§—É—Ç–±–æ–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="open_training")],
            [InlineKeyboardButton(text="üé≤ –§—É—Ç–±–æ–ª—å–Ω—ã–µ –∫–æ—Å—Ç–∏", callback_data="open_footballDice")],
            [InlineKeyboardButton(text="üÉè –ë–ª—ç–∫ –î–∂–µ–∫", callback_data="open_football21")],
            [InlineKeyboardButton(text="üé∞ –°–ª–æ—Ç-–º–∞—à–∏–Ω–∞", callback_data="open_slots")],
            [InlineKeyboardButton(text="üéØ –§—É—Ç–±–æ–ª—å–Ω–∞—è —Ä—É–ª–µ—Ç–∫–∞", callback_data="open_roulette")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ])
        
        await callback.message.edit_text(
            "‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!</b>\n\n"
            "‚öîÔ∏è –ò–≥—Ä–æ–≤—ã–µ —Ä–µ–∂–∏–º—ã:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    else:
        # –ï—Å–ª–∏ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
        channels_list = "\n".join([
            f"‚Ä¢ {channel_info['name']}" 
            for _, channel_info in not_subscribed
        ])
        
        subscription_message = (
            "‚ùå <b>–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!</b>\n\n"
            "–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞:\n\n"
            f"{channels_list}\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!</b> –µ—â–µ —Ä–∞–∑"
        )
        
        keyboard = await create_subscription_keyboard(not_subscribed)
        
        await callback.message.edit_text(
            text=subscription_message,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        await callback.answer("–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!", show_alert=True)

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await show_menu(callback, state)