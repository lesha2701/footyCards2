from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta
from aiogram.utils.markdown import html_decoration as hd

from db.user_queries import *

router = Router()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
CHANNELS_CONFIG = {
    -1002655732796: {  # ID –∫–∞–Ω–∞–ª–∞ 1
        'name': 'üì¢ –§—É—Ç–±–æ–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏',
        'url': 'https://t.me/RonaldoOrMessiQuest'
    },
    -1002459798852: {  # ID –∫–∞–Ω–∞–ª–∞ 2
        'name': 'üéÆ –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª', 
        'url': 'https://t.me/FootyCardsChannel'
    }
}

async def check_channels_subscription(user_id: int, bot: Bot) -> tuple[bool, list]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–≤—Å–µ_–ª–∏_–ø–æ–¥–ø–∏—Å–∫–∏_–∞–∫—Ç–∏–≤–Ω—ã, —Å–ø–∏—Å–æ–∫_–Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö_–∫–∞–Ω–∞–ª–æ–≤)
    """
    not_subscribed = []
    
    for channel_id, channel_info in CHANNELS_CONFIG.items():
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
            member = await bot.get_chat_member(chat_id=channel_id, user_id=user_id)
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –∏–ª–∏ –ø–æ–∫–∏–Ω—É–ª –∫–∞–Ω–∞–ª
            if member.status in ['left', 'kicked']:
                not_subscribed.append((channel_id, channel_info))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
            not_subscribed.append((channel_id, channel_info))
    
    return len(not_subscribed) == 0, not_subscribed

async def create_subscription_keyboard(not_subscribed_channels: list) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã"""
    buttons = []
    
    for channel_id, channel_info in not_subscribed_channels:
        buttons.append([
            InlineKeyboardButton(
                text=f"üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {channel_info['name']}",
                url=channel_info['url']
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    buttons.append([
        InlineKeyboardButton(
            text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!",
            callback_data="check_subscription"
        )
    ])
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    buttons.append([
        InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
            callback_data="back_to_menu"
        )
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@router.callback_query(F.data == "open_menu")
async def cmd_castle(message: Message, state: FSMContext):
    await show_menu(message, state)

async def show_menu(message: Message | CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏–≥—Ä–æ–∫–∞"""
    user_id = message.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_stats = await get_user_stats(user_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_text = await create_compact_stats_display(user_stats)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –º–µ–Ω—é
        text = (
            f"üéÆ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
            f"{stats_text}\n"
            f"üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì¶ –ú–∞–≥–∞–∑–∏–Ω –ø–∞–∫–æ–≤", callback_data="show_shop_packs")],
            [InlineKeyboardButton(text="‚öîÔ∏è –ò–≥—Ä–æ–≤—ã–µ —Ä–µ–∂–∏–º—ã", callback_data="play_menu")],
            [InlineKeyboardButton(text="üè™ –ú–∞—Ä–∫–µ—Ç", callback_data="market_menu")],
            [InlineKeyboardButton(text="üÉè –ú–æ–∏ –∫–∞—Ä—Ç—ã", callback_data="my_cards")],
            [InlineKeyboardButton(text="üèÜ –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤", callback_data="show_leaderboard")],
            [InlineKeyboardButton(text="üìö –ö–æ–ª–ª–µ–∫—Ü–∏–∏", callback_data="show_collections")],  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
            [InlineKeyboardButton(text="üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="donate_menu")]
        ])
        
        if isinstance(message, CallbackQuery):
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await message.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
                print(f"[{datetime.now()}] –ú–µ–Ω—é —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            except Exception as e:
                print(f"[{datetime.now()}] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é: {e}, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ")
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await message.message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        else:
            await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
            print(f"[{datetime.now()}] –ù–æ–≤–æ–µ –º–µ–Ω—é —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
    except Exception as e:
        print(f"[{datetime.now()}] –û–®–ò–ë–ö–ê –≤ show_menu: {e}")
        # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        text = "üìã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì¶ –ú–∞–≥–∞–∑–∏–Ω –ø–∞–∫–æ–≤", callback_data="show_shop_packs")],
            [InlineKeyboardButton(text="‚öîÔ∏è –ò–≥—Ä–æ–≤—ã–µ —Ä–µ–∂–∏–º—ã", callback_data="play_menu")],
            [InlineKeyboardButton(text="üè™ –ú–∞—Ä–∫–µ—Ç", callback_data="market_menu")],
            [InlineKeyboardButton(text="üÉè –ú–æ–∏ –∫–∞—Ä—Ç—ã", callback_data="my_cards")],
            [InlineKeyboardButton(text="üèÜ –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤", callback_data="show_leaderboard")],
            [InlineKeyboardButton(text="üìö –ö–æ–ª–ª–µ–∫—Ü–∏–∏", callback_data="show_collections")],  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
            [InlineKeyboardButton(text="üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="donate_menu")]
        ])
        
        if isinstance(message, CallbackQuery):
            try:
                await message.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
            except:
                await message.message.answer(text, reply_markup=keyboard, parse_mode="HTML")
        else:
            await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data == "play_menu")
async def play_menu(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ –∏–≥—Ä–æ–≤—ã–µ —Ä–µ–∂–∏–º—ã"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª—ã
    is_subscribed, not_subscribed = await check_channels_subscription(callback.from_user.id, bot)
    
    if not is_subscribed:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        channels_list = "\n".join([
            f"‚Ä¢ {channel_info['name']}" 
            for _, channel_info in not_subscribed
        ])
        
        subscription_message = (
            "üéÆ <b>–î–æ—Å—Ç—É–ø –∫ –∏–≥—Ä–æ–≤—ã–º —Ä–µ–∂–∏–º–∞–º</b>\n\n"
            "–ß—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å –≤ –Ω–∞—à–∏ –∏–≥—Ä—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:\n\n"
            f"{channels_list}\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!</b>"
        )
        
        keyboard = await create_subscription_keyboard(not_subscribed)
        
        await callback.message.edit_text(
            text=subscription_message,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        return
    
    # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ —Ä–µ–∂–∏–º—ã
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí™ –§—É—Ç–±–æ–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="open_training")],
        [InlineKeyboardButton(text="üé≤ –§—É—Ç–±–æ–ª—å–Ω—ã–µ –∫–æ—Å—Ç–∏", callback_data="open_footballDice")],
        [InlineKeyboardButton(text="üÉè –ë–ª—ç–∫ –î–∂–µ–∫", callback_data="open_football21")],
        [InlineKeyboardButton(text="üé∞ –°–ª–æ—Ç-–º–∞—à–∏–Ω–∞", callback_data="open_slots")],
        [InlineKeyboardButton(text="üéØ –§—É—Ç–±–æ–ª—å–Ω–∞—è —Ä—É–ª–µ—Ç–∫–∞", callback_data="open_roulette")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])

    await callback.message.edit_text("‚öîÔ∏è –ò–≥—Ä–æ–≤—ã–µ —Ä–µ–∂–∏–º—ã:", reply_markup=keyboard)

@router.callback_query(F.data == "check_subscription")
async def check_subscription_handler(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è'"""
    
    is_subscribed, not_subscribed = await check_channels_subscription(callback.from_user.id, bot)
    
    if is_subscribed:
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ —Ä–µ–∂–∏–º—ã
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí™ –§—É—Ç–±–æ–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="open_training")],
            [InlineKeyboardButton(text="üé≤ –§—É—Ç–±–æ–ª—å–Ω—ã–µ –∫–æ—Å—Ç–∏", callback_data="open_footballDice")],
            [InlineKeyboardButton(text="üÉè –ë–ª—ç–∫ –î–∂–µ–∫", callback_data="open_football21")],
            [InlineKeyboardButton(text="üé∞ –°–ª–æ—Ç-–º–∞—à–∏–Ω–∞", callback_data="open_slots")],
            [InlineKeyboardButton(text="üéØ –§—É—Ç–±–æ–ª—å–Ω–∞—è —Ä—É–ª–µ—Ç–∫–∞", callback_data="open_roulette")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ])
        
        await callback.message.edit_text(
            "‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!</b>\n\n"
            "‚öîÔ∏è –ò–≥—Ä–æ–≤—ã–µ —Ä–µ–∂–∏–º—ã:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    else:
        # –ï—Å–ª–∏ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
        channels_list = "\n".join([
            f"‚Ä¢ {channel_info['name']}" 
            for _, channel_info in not_subscribed
        ])
        
        subscription_message = (
            "‚ùå <b>–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!</b>\n\n"
            "–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞:\n\n"
            f"{channels_list}\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!</b> –µ—â–µ —Ä–∞–∑"
        )
        
        keyboard = await create_subscription_keyboard(not_subscribed)
        
        await callback.message.edit_text(
            text=subscription_message,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        await callback.answer("–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!", show_alert=True)

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await show_menu(callback, state)

async def create_compact_stats_display(stats) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not stats:
        return "üìä <i>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...</i>"
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    win_rate = 0
    if stats['total_games'] > 0:
        win_rate = (stats['wins'] / stats['total_games']) * 100
    
    training_success_rate = 0
    if stats['total_trainings'] > 0:
        training_success_rate = (stats['successful_trainings'] / stats['total_trainings']) * 100
    
    return (
        f"üí∞ <b>{stats['balance']:,}</b> | "
        f"‚≠ê <b>{stats['score']:,}</b> | "
        f"üÉè <b>{stats['total_cards']:,}</b>\n"
        f"üéÆ WR: <b>{win_rate:.1f}%</b> | "
        f"üí™ Eff: <b>{training_success_rate:.1f}%</b>\n"
    )

@router.callback_query(F.data == "show_leaderboard")
async def show_leaderboard(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –æ—á–∫–∞–º"""
    user_id = callback.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
        leaderboard_data = await get_leaderboard(user_id)
        
        if not leaderboard_data:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
        leaderboard_text = await create_leaderboard_display(leaderboard_data, user_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.edit_text(
                text=leaderboard_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        except Exception as e:
            print(f"[{datetime.now()}] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            await callback.message.answer(
                text=leaderboard_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        
        await callback.answer()
        
    except Exception as e:
        print(f"[{datetime.now()}] –û–®–ò–ë–ö–ê –≤ show_leaderboard: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞", show_alert=True)

async def create_leaderboard_display(leaderboard_data, current_user_id: int) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    top_players = leaderboard_data['top_players']
    user_position = leaderboard_data['user_position']
    total_players = leaderboard_data['total_players']
    current_user = leaderboard_data['current_user']
    
    # –≠–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–π –≤ —Ç–æ–ø–µ
    position_emojis = {
        1: "ü•á",
        2: "ü•à", 
        3: "ü•â"
    }
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    text = "üèÜ <b>–†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –æ—á–∫–∞–º</b>\n\n"
    
    # –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤
    if top_players:
        text += "<b>–¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤:</b>\n"
        text += "<blockquote>"
        
        for i, player in enumerate(top_players, 1):
            emoji = position_emojis.get(i, f"{i}.")
            username = player['username'] or f"–ò–≥—Ä–æ–∫ {player['user_id']}"
            
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if len(username) > 20:
                username = username[:20] + "..."
            
            # –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if player['user_id'] == current_user_id:
                text += f"{emoji} <b>üëâ {username}</b> - {player['score']:,} –æ—á–∫–æ–≤ ‚≠ê\n"
            else:
                text += f"{emoji} {username} - {player['score']:,} –æ—á–∫–æ–≤\n"
        text += "</blockquote>"
    else:
        text += "üò¥ <i>–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–∞–±–æ—Ç–∞–ª –æ—á–∫–æ–≤</i>\n"
    
    text += "\n"
    
    # –ü–æ–∑–∏—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_position:
        if user_position <= 10:
            text += f"‚úÖ <b>–í—ã –≤ —Ç–æ–ø-10!</b> –ü–æ–∑–∏—Ü–∏—è: #{user_position}\n"
        else:
            text += f"üìä <b>–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è:</b> #{user_position} –∏–∑ {total_players}\n"
            
        if current_user:
            text += f"‚≠ê <b>–í–∞—à–∏ –æ—á–∫–∏:</b> {current_user['score']:,}\n"
    else:
        text += "üìä <i>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—á–∫–æ–≤ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ</i>\n"
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    text += f"\nüë• <b>–í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ:</b> {total_players}"
    
    return text

@router.callback_query(F.data == "show_collections")
async def show_collections(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö"""
    user_id = callback.from_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö
        collections_data = await get_collections_info()
        
        if not collections_data:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–π
        collections_text = await create_collections_display(collections_data)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.edit_text(
                text=collections_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        except Exception as e:
            print(f"[{datetime.now()}] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            await callback.message.answer(
                text=collections_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        
        await callback.answer()
        
    except Exception as e:
        print(f"[{datetime.now()}] –û–®–ò–ë–ö–ê –≤ show_collections: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö", show_alert=True)

async def create_collections_display(collections_data) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö"""
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –∞—Ä—Ö–∏–≤–Ω—ã–µ
    active_collections = [c for c in collections_data if c['is_active']]
    archived_collections = [c for c in collections_data if not c['is_active']]
    
    text = "üìö <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö</b>\n\n"
    
    # –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    if active_collections:
        text += "üü¢ <b>–ê–ö–¢–ò–í–ù–´–ï –ö–û–õ–õ–ï–ö–¶–ò–ò</b>\n"
        text += "<blockquote>"
        
        for collection in active_collections:
            # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            progress_percent = (collection['cards_opened'] / collection['total_cards']) * 100 if collection['total_cards'] > 0 else 0
            progress_bar = create_progress_bar(collection['cards_opened'], collection['total_cards'])
        
            
            text += (
                f"<b>{collection['name']}</b>\n"
                f"üìä {progress_bar} {progress_percent:.1f}%\n"
                f"üé¥ {collection['cards_opened']}/{collection['total_cards']} –∫–∞—Ä—Ç\n"
            )
            
            if collection['description']:
                text += f"<i>{collection['description']}</i>\n"
            
            text += "\n"
        
        text += "</blockquote>"
    else:
        text += "üò¥ <i>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π</i>\n\n"
    
    # –ê—Ä—Ö–∏–≤–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    if archived_collections:
        text += "üî¥ <b>–ê–†–•–ò–í–ù–´–ï –ö–û–õ–õ–ï–ö–¶–ò–ò</b>\n"
        text += "<blockquote>"
        
        for collection in archived_collections[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
            progress_percent = (collection['cards_opened'] / collection['total_cards']) * 100 if collection['total_cards'] > 0 else 0

            
            text += (
                f"<b>{collection['name']}</b>\n"
                f"üé¥ {collection['cards_opened']}/{collection['total_cards']} –∫–∞—Ä—Ç\n"
                f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–∞ {progress_percent:.1f}%\n\n"
            )
        
        # –ï—Å–ª–∏ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π –±–æ–ª—å—à–µ 5, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        if len(archived_collections) > 5:
            text += f"<i>... –∏ –µ—â–µ {len(archived_collections) - 5} –∫–æ–ª–ª–µ–∫—Ü–∏–π</i>\n"
        
        text += "</blockquote>"
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_collections = len(collections_data)
    total_cards = sum(c['total_cards'] for c in collections_data)
    total_opened = sum(c['cards_opened'] for c in collections_data)
    overall_progress = (total_opened / total_cards) * 100 if total_cards > 0 else 0
    
    text += f"\n\nüìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
    text += f"<blockquote>‚Ä¢ –í—Å–µ–≥–æ –∫–æ–ª–ª–µ–∫—Ü–∏–π: {total_collections}\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ –∫–∞—Ä—Ç –≤ —Å–∏—Å—Ç–µ–º–µ: {total_cards}\n"
    text += f"‚Ä¢ –û—Ç–∫—Ä—ã—Ç–æ –∫–∞—Ä—Ç: {total_opened}\n"
    text += f"‚Ä¢ –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {overall_progress:.1f}%</blockquote>"
    
    return text

def create_progress_bar(current: int, total: int, length: int = 10) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
    if total == 0:
        return "‚ñë" * length
    
    filled = round((current / total) * length)
    empty = length - filled
    return "‚ñà" * filled + "‚ñë" * empty