from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import random
import asyncio
from datetime import datetime

from db.user_queries import get_user_by_id, update_user_balance
from db.game_queries import save_game_result, get_football_dice_stats

router = Router()

class FootballDiceStates(StatesGroup):
    choosing_bet = State()
    round_1 = State()
    round_2 = State()
    result = State()

# –§—É—Ç–±–æ–ª—å–Ω—ã–µ —Å—Ç–∞–≤–∫–∏
FOOTBALL_BET_AMOUNTS = [100, 250, 500, 1000, 2500, 5000, 10000]

# –§—É—Ç–±–æ–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä–∞
COMMENTATOR_PHRASES = {
    'start': [
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å—Ç–∞–¥–∏–æ–Ω! –ì–æ—Ç–æ–≤—ã –∫ —Ñ—É—Ç–±–æ–ª—å–Ω—ã–º –∫–æ—Å—Ç—è–º? ‚öΩüé≤",
        "–ú—è—á –≤ —Ü–µ–Ω—Ç—Ä–µ –ø–æ–ª—è! –ö—Ç–æ –∑–∞–±—å—ë—Ç –ø–µ—Ä–≤—ã–π —Å –ø–µ–Ω–∞–ª—å—Ç–∏? üéØ",
        "–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –Ω–∞—Ä–∞—Å—Ç–∞–µ—Ç... –ü–µ–Ω–∞–ª—å—Ç–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! üî•",
        "–ë–æ–ª–µ–ª—å—â–∏–∫–∏ –∑–∞–º–µ—Ä–ª–∏ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —É–¥–∞—Ä–∞! üëÄ",
        "–°–µ–≥–æ–¥–Ω—è –Ω–∞ –ø–æ–ª–µ - –ª—É—á—à–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –ø–µ–Ω–∞–ª—å—Ç–∏! üí´"
    ],
    'goblin': [
        "–°—É–¥—å—è –≥–æ—Ç–æ–≤ –∫ –±—Ä–æ—Å–∫—É! ‚öΩ",
        "–í—Ä–∞—Ç–∞—Ä—å –Ω–µ—Ä–≤–Ω–æ –ø–µ—Ä–µ–º–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ –ª–∏–Ω–∏–∏! üß§",
        "–ú—è—á –∂–¥—ë—Ç —Å–≤–æ–µ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è! üîµ",
        "–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –≤–∏—Ç–∞–µ—Ç –≤ –≤–æ–∑–¥—É—Ö–µ! üå¨Ô∏è",
        "–ö—Ç–æ –ø—Ä–æ—è–≤–∏—Ç —Ö–ª–∞–¥–Ω–æ–∫—Ä–æ–≤–∏–µ? ‚ùÑÔ∏è"
    ],
    'round_inter': [
        "–ù—É —á—Ç–æ, –≥–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É–¥–∞—Ä—É? ‚öΩ",
        "–•–∞! –î–∞–≤–∞–π –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –¥–∞–ª—å—à–µ! üëÄ",
        "–ù–µ —Ä–∞–¥—É–π—Å—è —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏! üòè",
        "–°–ª–µ–¥—É—é—â–∏–π —É–¥–∞—Ä —Ä–µ—à–∏—Ç –≤—Å—ë! üéØ",
        "–¢—ã –¥—É–º–∞–µ—à—å, —ç—Ç–æ —É–¥–∞—á–∞? –•–∞! üçÄ"
    ],
    'win': [
        "–ì–û–û–û–û–õ! –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–∞—è –ø–æ–±–µ–¥–∞! üéâ",
        "–í–æ—Ç —ç—Ç–æ —Ö–ª–∞–¥–Ω–æ–∫—Ä–æ–≤–∏–µ! –ò–≥—Ä–æ–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–ª–∞—Å—Å! ‚≠ê",
        "–ë–æ–ª–µ–ª—å—â–∏–∫–∏ —Å—Ö–æ–¥—è—Ç —Å —É–º–∞! –ö–∞–∫–∞—è –∏–≥—Ä–∞! ü§Ø",
        "–¢–∞–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ —è –¥–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª! ‚ú®",
        "–≠—Ç–æ –±—É–¥–µ—Ç –ø–æ–º–Ω–∏—Ç—å—Å—è –¥–æ–ª–≥–æ! –í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! üëè"
    ],
    'lose': [
        "–ú–∏–º–æ! –£–ø—É—Å—Ç–∏–ª–∏ –ø–æ–±–µ–¥—É... –ñ–∞–ª—å üòî",
        "–ù–µ –ø–æ–≤–µ–∑–ª–æ —Å–µ–≥–æ–¥–Ω—è... –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Ç–æ—á–Ω–æ –ø–æ–ª—É—á–∏—Ç—Å—è! üí™",
        "–í—Ä–∞—Ç–∞—Ä—å –æ–∫–∞–∑–∞–ª—Å—è —Å–∏–ª—å–Ω–µ–µ... –ù–æ –≤—ã –¥–µ—Ä–∂–∞–ª–∏—Å—å –¥–æ—Å—Ç–æ–π–Ω–æ! üõ°Ô∏è",
        "–ò–Ω–æ–≥–¥–∞ –ø—Ä–æ–º–∞—Ö–∏–≤–∞—é—Ç—Å—è –¥–∞–∂–µ –ª—É—á—à–∏–µ... –ù–µ –≤–µ—à–∞–π—Ç–µ –Ω–æ—Å! üåü",
        "–≠—Ç–æ –≤—Å–µ–≥–æ –ª–∏—à—å –æ–¥–Ω–∞ —Å–µ—Ä–∏—è! –í–ø–µ—Ä–µ–¥–∏ –µ—â—ë –º–Ω–æ–≥–æ –º–∞—Ç—á–µ–π! ‚öΩ"
    ],
    'draw': [
        "–ù–∏—á—å—è! –ù–∞–ø—Ä—è–∂—ë–Ω–Ω–∞—è –±–æ—Ä—å–±–∞ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–¥–∞—Ä–∞! ‚è±Ô∏è",
        "–†–∞–≤–Ω–∞—è –∏–≥—Ä–∞! –û–±–∞ –∑–∞—Å–ª—É–∂–∏–≤–∞—é—Ç —É–≤–∞–∂–µ–Ω–∏—è! ü§ù",
        "–ò–Ω—Ç—Ä–∏–≥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –≤—Å—Ç—Ä–µ—á–∏! üîÑ",
        "–ù–∏–∫—Ç–æ –Ω–µ —Ö–æ—Ç–µ–ª —É—Å—Ç—É–ø–∞—Ç—å! –í–æ—Ç —ç—Ç–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä! üí™",
        "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –û–±–∞ –º–æ–ª–æ–¥—Ü—ã! üëè"
    ]
}

# –§—É—Ç–±–æ–ª—å–Ω—ã–µ —ç–º–æ–¥–∑–∏ –¥–ª—è "–∫–æ—Å—Ç–µ–π" (–≥–æ–ª—ã)
FOOTBALL_DICE = ["‚ë†", "‚ë°", "‚ë¢", "‚ë£", "‚ë§", "‚ë•"]  # –¶–∏—Ñ—Ä—ã –≤ –∫—Ä—É–∂–∫–∞—Ö –∫–∞–∫ –≥–æ–ª—ã

async def safe_edit_message(callback: CallbackQuery, text: str, reply_markup=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await callback.message.edit_text(text, reply_markup=reply_markup, parse_mode="HTML")
    except:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "message is not modified"
        pass

async def show_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –∫–æ—Å—Ç–µ–π"""
    user_id = callback.from_user.id
    stats = await get_football_dice_stats(user_id)
    
    stats_text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –§—É—Ç–±–æ–ª—å–Ω—ã—Ö –ü–µ–Ω–∞–ª—å—Ç–∏</b>\n\n"
        f"<blockquote>üéØ –í—Å–µ–≥–æ –∏–≥—Ä: {stats['total_games']}\n"
        f"‚úÖ –ü–æ–±–µ–¥: {stats['wins']}\n"
        f"‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {stats['losses']}\n"
        f"ü§ù –ù–∏—á—å–∏—Ö: {stats['draws']}\n"
        f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {stats['win_percentage']}%\n\n"
        f"üí∞ –û–±—â–∏–π –≤—ã–∏–≥—Ä—ã—à: {stats['total_win']} –º–æ–Ω–µ—Ç\n"
        f"üé∞ –û–±—â–∏–µ —Å—Ç–∞–≤–∫–∏: {stats['total_bet']} –º–æ–Ω–µ—Ç\n"
        f"üíµ –ü—Ä–∏–±—ã–ª—å: {stats['profit']} –º–æ–Ω–µ—Ç</blockquote>\n\n"
        f"üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å, —É–¥–∞—á–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–ª—ã–±–Ω—ë—Ç—Å—è! ‚öΩÔ∏è"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–µ", callback_data="back_to_football_dice")]
    ])
    
    await safe_edit_message(callback, stats_text, keyboard)

@router.callback_query(F.data == "footballDice_stats")
async def handle_stats(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    await show_stats(callback)

@router.callback_query(F.data == "back_to_football_dice")
async def back_to_game(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –∏–≥—Ä–µ –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    await start_football_dice(callback, state)

@router.callback_query(F.data == "open_footballDice")
async def start_football_dice(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ñ—É—Ç–±–æ–ª—å–Ω–æ–π –∏–≥—Ä—ã –≤ –∫–æ—Å—Ç–∏"""
    user_id = callback.from_user.id
    user = await get_user_by_id(user_id)
    
    if user['balance'] < min(FOOTBALL_BET_AMOUNTS):
        await callback.answer(
            f"‚öΩ –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {min(FOOTBALL_BET_AMOUNTS)} –º–æ–Ω–µ—Ç –¥–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞ –ø–æ–ª–µ!",
            show_alert=True
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞–≤–æ–∫
    bet_buttons = []
    for amount in FOOTBALL_BET_AMOUNTS:
        if user['balance'] >= amount:
            bet_buttons.append([InlineKeyboardButton(
                text=f"‚öΩ –°—Ç–∞–≤–∫–∞: {amount} –º–æ–Ω–µ—Ç",
                callback_data=f"footballDice_bet:{amount}"
            )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –Ω–∞–∑–∞–¥
    bet_buttons.append([
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="footballDice_stats"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=bet_buttons)
    commentator_phrase = random.choice(COMMENTATOR_PHRASES['start'])
    
    await safe_edit_message(
        callback,
        f"‚öΩ <b>–§–£–¢–ë–û–õ–¨–ù–´–ï –ü–ï–ù–ê–õ–¨–¢–ò</b>\n\n"
        f"üéôÔ∏è <i>\"{commentator_phrase}\"</i>\n\n"
        f"üìú <b>–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:</b>\n"
        f"<blockquote>‚ñ´Ô∏è –ë—Ä–æ—Å–∞–µ–º ¬´–∫–æ—Å—Ç–∏¬ª –≤ 2 —Ä–∞—É–Ω–¥–∞\n"
        f"‚ñ´Ô∏è –°—É–º–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–≥–æ–ª—ã)\n"
        f"‚ñ´Ô∏è –ö—Ç–æ –∑–∞–±–∏–ª –±–æ–ª—å—à–µ - –∑–∞–±–∏—Ä–∞–µ—Ç —Å—Ç–∞–≤–∫—É\n"
        f"‚ñ´Ô∏è –ü—Ä–∏ –Ω–∏—á—å–µ - –≤–æ–∑–≤—Ä–∞—Ç —Å—Ç–∞–≤–∫–∏</blockquote>\n\n"
        f"üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {user['balance']} –º–æ–Ω–µ—Ç\n\n"
        f"<i>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏:</i>",
        keyboard
    )
    
    await state.set_state(FootballDiceStates.choosing_bet)

@router.callback_query(F.data.startswith("footballDice_bet:"))
async def set_bet(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞–≤–∫–∏ –∏ –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã"""
    bet_amount = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    
    user_info = await get_user_by_id(user_id)
    if user_info['balance'] < bet_amount:
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!", show_alert=True)
        return
    
    # –°–Ω–∏–º–∞–µ–º —Å—Ç–∞–≤–∫—É
    await update_user_balance(user_id, -bet_amount)
    
    await state.update_data(bet_amount=bet_amount, player_score=0, opponent_score=0)
    
    await safe_edit_message(
        callback,
        f"‚öΩ <b>–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: {bet_amount} –º–æ–Ω–µ—Ç</b>\n\n"
        f"üéôÔ∏è <i>\"–û—Ç–ª–∏—á–Ω–æ! –ü–æ—Å–º–æ—Ç—Ä–∏–º, –Ω–∞ —á—Ç–æ —Ç—ã —Å–ø–æ—Å–æ–±–µ–Ω!\"</i>\n\n"
        f"<i>–ú—è—á —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —Ç–æ—á–∫—É –ø–µ–Ω–∞–ª—å—Ç–∏...</i>"
    )
    
    await asyncio.sleep(2)
    await start_round(callback, state, round_number=1)
    await state.set_state(FootballDiceStates.round_1)

async def start_round(callback: CallbackQuery, state: FSMContext, round_number: int):
    """–ù–∞—á–∞–ª–æ —Ä–∞—É–Ω–¥–∞"""
    state_data = await state.get_data()
    bet_amount = state_data['bet_amount']
    user_id = callback.from_user.id
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–≥–æ–ª—ã)
    player_goals = random.randint(1, 6)
    opponent_goals = random.randint(1, 6)
    
    await state.update_data(
        player_score=state_data['player_score'] + player_goals,
        opponent_score=state_data['opponent_score'] + opponent_goals,
        last_player_goals=player_goals,
        last_opponent_goals=opponent_goals
    )
    
    new_state_data = await state.get_data()
    
    # –ê–Ω–∏–º–∞—Ü–∏—è –±—Ä–æ—Å–∫–∞
    for i in range(3):
        temp_goals = random.randint(1, 6)
        # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–¥—Ä–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
        animation_text = f"‚öΩ <b>–†–∞—É–Ω–¥ {round_number}</b> | –°—Ç–∞–≤–∫–∞: {bet_amount} –º–æ–Ω–µ—Ç\n\n"
        animation_text += f"–¢–≤–æ–π —É–¥–∞—Ä: {FOOTBALL_DICE[temp_goals-1]}\n"
        animation_text += f"–£–¥–∞—Ä —Å–æ–ø–µ—Ä–Ω–∏–∫–∞: {FOOTBALL_DICE[temp_goals-1]}\n\n"
        
        if i == 0:
            animation_text += "<i>–ú—è—á —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...</i>"
        elif i == 1:
            animation_text += "<i>–†–∞–∑–±–µ–≥... –£–¥–∞—Ä!</i>"
        else:
            animation_text += "<i>–ú—è—á –ª–µ—Ç–∏—Ç –≤ —Å—Ç–≤–æ—Ä –≤–æ—Ä–æ—Ç...</i>"
        
        await safe_edit_message(callback, animation_text)
        await asyncio.sleep(1)
    
    round_phrase = random.choice(COMMENTATOR_PHRASES['round_inter'])
    
    await safe_edit_message(
        callback,
        f"‚öΩ <b>–†–ê–£–ù–î {round_number} –ó–ê–í–ï–†–®–Å–ù</b>\n\n"
        f"–¢–≤–æ–∏ –≥–æ–ª—ã: {FOOTBALL_DICE[player_goals-1]} = <b>{player_goals}</b>\n"
        f"–ì–æ–ª—ã —Å–æ–ø–µ—Ä–Ω–∏–∫–∞: {FOOTBALL_DICE[opponent_goals-1]} = <b>{opponent_goals}</b>\n\n"
        f"üéôÔ∏è <i>\"{round_phrase}\"</i>\n\n"
        f"üìä <b>–¢–µ–∫—É—â–∏–π —Å—á—ë—Ç:</b>\n"
        f"–¢—ã: {new_state_data['player_score']} –≥–æ–ª–æ–≤\n"
        f"–°–æ–ø–µ—Ä–Ω–∏–∫: {new_state_data['opponent_score']} –≥–æ–ª–æ–≤"
    )
    
    if round_number == 1:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫–æ –≤—Ç–æ—Ä–æ–º—É —Ä–∞—É–Ω–¥—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚öΩ –ë–∏—Ç—å –ø–µ–Ω–∞–ª—å—Ç–∏", callback_data="next_round")]
        ])
        await callback.message.edit_reply_markup(reply_markup=keyboard)
        await state.set_state(FootballDiceStates.round_2)
    else:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
        await asyncio.sleep(3)
        await finish_game(callback, state)

@router.callback_query(F.data == "next_round")
async def start_second_round(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –≤—Ç–æ—Ä–æ–≥–æ —Ä–∞—É–Ω–¥–∞"""
    await safe_edit_message(
        callback,
        f"‚öΩ <b>–í–¢–û–†–û–ô –†–ê–£–ù–î</b>\n\n"
        f"üéôÔ∏è <i>\"{random.choice(COMMENTATOR_PHRASES['goblin'])}\"</i>\n\n"
        f"<i>–ú—è—á —Å–Ω–æ–≤–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —Ç–æ—á–∫—É...</i>"
    )
    await asyncio.sleep(2)
    await start_round(callback, state, round_number=2)

async def finish_game(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã –∏ –ø–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    state_data = await state.get_data()
    player_total = state_data['player_score']
    opponent_total = state_data['opponent_score']
    bet_amount = state_data['bet_amount']
    user_id = callback.from_user.id
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if player_total > opponent_total:
        win_amount = bet_amount * 2
        result = "win"
        result_text = f"‚ú® <b>–¢–´ –ü–û–ë–ï–î–ò–õ!</b> +{win_amount} –º–æ–Ω–µ—Ç"
        phrase = random.choice(COMMENTATOR_PHRASES['win'])
    elif player_total < opponent_total:
        result = "lose"
        win_amount = 0
        result_text = f"üíÄ <b>–¢–´ –ü–†–û–ò–ì–†–ê–õ!</b> –°–æ–ø–µ—Ä–Ω–∏–∫ –∑–∞–±–∏—Ä–∞–µ—Ç {bet_amount} –º–æ–Ω–µ—Ç"
        phrase = random.choice(COMMENTATOR_PHRASES['lose'])
    else:
        result = "draw"
        win_amount = bet_amount
        result_text = f"üîÑ <b>–ù–ò–ß–¨–Ø!</b> –í–æ–∑–≤—Ä–∞—Ç {bet_amount} –º–æ–Ω–µ—Ç"
        phrase = random.choice(COMMENTATOR_PHRASES['draw'])
    
    # –ù–∞—á–∏—Å–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à
    if win_amount > 0:
        await update_user_balance(user_id, win_amount)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
    await save_game_result(
        user_id=user_id,
        game_type="football_dice",
        result=result,
        bet_amount=bet_amount,
        win_amount=win_amount,
        player_score=player_total,
        opponent_score=opponent_total
    )
    
    user_info = await get_user_by_id(user_id)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚öΩ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="open_footballDice")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="footballDice_stats")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")],
    ])
    
    await safe_edit_message(
        callback,
        f"‚öΩ <b>–ò–ì–†–ê –ó–ê–í–ï–†–®–ï–ù–ê!</b>\n\n"
        f"üèÅ <b>–§–ò–ù–ê–õ–¨–ù–´–ô –°–ß–Å–¢:</b>\n"
        f"–¢—ã: {player_total} –≥–æ–ª–æ–≤ {FOOTBALL_DICE[random.randint(0,5)]}\n"
        f"–°–æ–ø–µ—Ä–Ω–∏–∫: {opponent_total} –≥–æ–ª–æ–≤ {FOOTBALL_DICE[random.randint(0,5)]}\n\n"
        f"üéôÔ∏è <i>\"{phrase}\"</i>\n\n"
        f"üí∞ <b>{result_text}</b>\n"
        f"üè¶ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: <b>{user_info['balance']} –º–æ–Ω–µ—Ç</b>",
        keyboard
    )
    await state.set_state(FootballDiceStates.result)