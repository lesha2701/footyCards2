from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import random
import asyncio
from datetime import datetime

from db.user_queries import get_user_by_id, update_user_balance
from db.game_queries import save_game_result, get_football_roulette_stats

router = Router()

class FootballRouletteStates(StatesGroup):
    choosing_bet = State()
    choosing_bet_type = State()
    choosing_number = State()
    choosing_color = State()
    choosing_sector = State()
    spinning = State()
    result = State()

# –°—Ç–∞–≤–∫–∏ –¥–ª—è —Ä—É–ª–µ—Ç–∫–∏
ROULETTE_BET_AMOUNTS = [100, 250, 500, 1000, 2500, 5000, 10000]

# –†—É–ª–µ—Ç–∫–∞ —á–∏—Å–µ–ª (0-36 –∫–∞–∫ –≤ –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–π —Ä—É–ª–µ—Ç–∫–µ)
ROULETTE_NUMBERS = list(range(37))  # 0-36

# –¶–≤–µ—Ç–∞ —Ä—É–ª–µ—Ç–∫–∏ (0 - –∑–µ–ª–µ–Ω—ã–π, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–µ—Ä–µ–¥—É—é—Ç—Å—è)
ROULETTE_COLORS = {
    0: 'üü¢',  # –ó–µ–ª–µ–Ω—ã–π
    **{num: 'üî¥' if num % 2 == 1 else '‚ö´' for num in range(1, 37)}  # –ö—Ä–∞—Å–Ω—ã–π/–ß–µ—Ä–Ω—ã–π
}

# –°–µ–∫—Ç–æ—Ä–∞ —Ä—É–ª–µ—Ç–∫–∏
ROULETTE_SECTORS = {
    '1st_12': {'range': range(1, 13), 'multiplier': 3, 'name': '1-12'},
    '2nd_12': {'range': range(13, 25), 'multiplier': 3, 'name': '13-24'}, 
    '3rd_12': {'range': range(25, 37), 'multiplier': 3, 'name': '25-36'},
    '1-18': {'range': range(1, 19), 'multiplier': 2, 'name': '1-18'},
    '19-36': {'range': range(19, 37), 'multiplier': 2, 'name': '19-36'},
    'even': {'condition': lambda x: x % 2 == 0 and x != 0, 'multiplier': 2, 'name': '–ß—ë—Ç–Ω—ã–µ'},
    'odd': {'condition': lambda x: x % 2 == 1, 'multiplier': 2, 'name': '–ù–µ—á—ë—Ç–Ω—ã–µ'},
    'red': {'condition': lambda x: ROULETTE_COLORS[x] == 'üî¥', 'multiplier': 2, 'name': '–ö—Ä–∞—Å–Ω—ã–µ'},
    'black': {'condition': lambda x: ROULETTE_COLORS[x] == '‚ö´', 'multiplier': 2, 'name': '–ß—ë—Ä–Ω—ã–µ'}
}

# –§—É—Ç–±–æ–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä–∞ –¥–ª—è —Ä—É–ª–µ—Ç–∫–∏
ROULETTE_PHRASES = {
    'start': [
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ñ—É—Ç–±–æ–ª—å–Ω—É—é —Ä—É–ª–µ—Ç–∫—É! ‚öΩüé∞",
        "–ú—è—á –Ω–∞ —Ç–æ—á–∫–µ... –ö—É–¥–∞ –æ–Ω –ø–æ–ª–µ—Ç–∏—Ç? üéØ",
        "–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∫–∞–∫ –ø–µ—Ä–µ–¥ –ø–µ–Ω–∞–ª—å—Ç–∏! üî•",
        "–ë–æ–ª–µ–ª—å—â–∏–∫–∏ –∑–∞–º–µ—Ä–ª–∏ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏... üëÄ",
        "–§—É—Ç–±–æ–ª—å–Ω–∞—è —É–¥–∞—á–∞ –Ω–∞ —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ! üí´"
    ],
    'spin': [
        "–ú—è—á –∫—Ä—É—Ç–∏—Ç—Å—è –ø–æ –ø–æ–ª—é... ‚öΩ",
        "–í—Ä–∞—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! üîÑ",
        "–ö—É–¥–∞ –∂–µ –ø—Ä–∏–∑–µ–º–ª–∏—Ç—Å—è –º—è—á? üéØ",
        "–°–µ–∫—É–Ω–¥–æ—á–∫—É, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç... ‚è≥",
        "–£–¥–∞—á–∞ –Ω–∞ —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ! üçÄ"
    ],
    'win': [
        "–ì–û–û–û–û–õ! –ù–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à! üéâ",
        "–í–æ—Ç —ç—Ç–æ —Ç–æ—á–Ω–æ—Å—Ç—å! –ü—Ä—è–º–æ –≤ –¥–µ–≤—è—Ç–∫—É! ‚≠ê",
        "–ë–æ–ª–µ–ª—å—â–∏–∫–∏ —Å—Ö–æ–¥—è—Ç —Å —É–º–∞! –ö–∞–∫–∞—è –∏–≥—Ä–∞! ü§Ø",
        "–¢–∞–∫–æ–π —É–¥–∞—á–∏ —è –¥–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª! ‚ú®",
        "–≠—Ç–æ –±—É–¥–µ—Ç –ø–æ–º–Ω–∏—Ç—å—Å—è –¥–æ–ª–≥–æ! –í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! üëè"
    ],
    'lose': [
        "–ú–∏–º–æ! –ù–µ –ø–æ–≤–µ–∑–ª–æ... üòî",
        "–í—Ä–∞—Ç–∞—Ä—å –ø–æ–π–º–∞–ª –º—è—á! –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–ª—É—á–∏—Ç—Å—è! üí™",
        "–°–æ–ø–µ—Ä–Ω–∏–∫ –æ–∫–∞–∑–∞–ª—Å—è —Å–∏–ª—å–Ω–µ–µ... –ù–æ —Ç—ã –¥–µ—Ä–∂–∞–ª—Å—è –¥–æ—Å—Ç–æ–π–Ω–æ! üõ°Ô∏è",
        "–ò–Ω–æ–≥–¥–∞ –Ω–µ –≤–µ–∑—ë—Ç –¥–∞–∂–µ –ª—É—á—à–∏–º... –ù–µ –≤–µ—à–∞–π –Ω–æ—Å! üåü",
        "–≠—Ç–æ –≤—Å–µ–≥–æ –ª–∏—à—å –æ–¥–∏–Ω —É–¥–∞—Ä! –í–ø–µ—Ä–µ–¥–∏ –µ—â—ë –º–Ω–æ–≥–æ –º–∞—Ç—á–µ–π! ‚öΩ"
    ],
    'jackpot': [
        "–•–ï–¢-–¢–†–ò–ö! –ê–ë–°–û–õ–Æ–¢–ù–´–ô –î–ñ–ï–ö–ü–û–¢! üéØ",
        "–ë–†–ê–í–û! –¢–æ—á–Ω–æ—Å—Ç—å —Å–Ω–∞–π–ø–µ—Ä–∞! üí´",
        "–¢–∞–∫–æ–≥–æ —è –µ—â—ë –Ω–µ –≤–∏–¥–µ–ª! –§–µ–Ω–æ–º–µ–Ω–∞–ª—å–Ω–æ! ü§©",
        "–≠—Ç–æ –≤–æ–π–¥—ë—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é —Ç—É—Ä–Ω–∏—Ä–∞! –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ! üìú",
        "–°–Ω–∏–º–∏—Ç–µ —à–ª—è–ø—É! –í–µ–ª–∏—á–∞–π—à–∏–π –≤—ã–∏–≥—Ä—ã—à! üé©"
    ]
}

async def safe_edit_message(callback: CallbackQuery, text: str, reply_markup=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await callback.message.edit_text(text, reply_markup=reply_markup, parse_mode="HTML")
    except:
        pass

async def show_roulette_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ—É—Ç–±–æ–ª—å–Ω–æ–π —Ä—É–ª–µ—Ç–∫–∏"""
    user_id = callback.from_user.id
    stats = await get_football_roulette_stats(user_id)
    
    stats_text = (
        f"üé∞ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –§—É—Ç–±–æ–ª—å–Ω–æ–π –†—É–ª–µ—Ç–∫–∏</b>\n\n"
        f"<blockquote>üéØ –í—Å–µ–≥–æ —Å–ø–∏–Ω–æ–≤: {stats['total_games']}\n"
        f"‚úÖ –í—ã–∏–≥—Ä—ã—à–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫: {stats['wins']}\n"
        f"‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫: {stats['losses']}\n"
        f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {stats['win_percentage']}%</blockquote>\n\n"
        f"<blockquote>üí∞ –û–±—â–∏–π –≤—ã–∏–≥—Ä—ã—à: {stats['total_win']} –º–æ–Ω–µ—Ç\n"
        f"üé∞ –û–±—â–∏–µ —Å—Ç–∞–≤–∫–∏: {stats['total_bet']} –º–æ–Ω–µ—Ç\n"
        f"üíµ –ü—Ä–∏–±—ã–ª—å: {stats['profit']} –º–æ–Ω–µ—Ç\n"
        f"üèÜ –°–∞–º—ã–π –±–æ–ª—å—à–æ–π –≤—ã–∏–≥—Ä—ã—à: {stats['biggest_win']} –º–æ–Ω–µ—Ç</blockquote>\n\n"
        f"üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å, —É–¥–∞—á–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–ª—ã–±–Ω—ë—Ç—Å—è! ‚öΩ"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Ä—É–ª–µ—Ç–∫–µ", callback_data="back_to_roulette")]
    ])
    
    await safe_edit_message(callback, stats_text, keyboard)

@router.callback_query(F.data == "roulette_stats")
async def handle_roulette_stats(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä—É–ª–µ—Ç–∫–∏"""
    await show_roulette_stats(callback)

@router.callback_query(F.data == "back_to_roulette")
async def back_to_roulette(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Ä—É–ª–µ—Ç–∫–µ –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    await start_football_roulette(callback, state)

@router.callback_query(F.data == "open_roulette")
async def start_football_roulette(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã –≤ —Ñ—É—Ç–±–æ–ª—å–Ω—É—é —Ä—É–ª–µ—Ç–∫—É"""
    user_id = callback.from_user.id
    user = await get_user_by_id(user_id)
    
    if user['balance'] < min(ROULETTE_BET_AMOUNTS):
        await callback.answer(
            f"üé∞ –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {min(ROULETTE_BET_AMOUNTS)} –º–æ–Ω–µ—Ç –¥–ª—è –∏–≥—Ä—ã!",
            show_alert=True
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞–≤–æ–∫
    bet_buttons = []
    for amount in ROULETTE_BET_AMOUNTS:
        if user['balance'] >= amount:
            bet_buttons.append([InlineKeyboardButton(
                text=f"üé∞ –°—Ç–∞–≤–∫–∞: {amount} –º–æ–Ω–µ—Ç",
                callback_data=f"roulette_bet:{amount}"
            )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –Ω–∞–∑–∞–¥
    bet_buttons.append([
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="roulette_stats"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=bet_buttons)
    commentator_phrase = random.choice(ROULETTE_PHRASES['start'])
    
    await safe_edit_message(
        callback,
        f"üé∞ <b>–§–£–¢–ë–û–õ–¨–ù–ê–Ø –†–£–õ–ï–¢–ö–ê</b>\n\n"
        f"üéôÔ∏è <i>\"{commentator_phrase}\"</i>\n\n"
        f"üìú <b>–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:</b>\n"
        f"<blockquote>‚ñ´Ô∏è –°—Ç–∞–≤—å—Ç–µ –Ω–∞ —á–∏—Å–ª–∞, —Ü–≤–µ—Ç–∞ –∏–ª–∏ —Å–µ–∫—Ç–æ—Ä–∞\n"
        f"‚ñ´Ô∏è –ú—è—á –≤—Ä–∞—â–∞–µ—Ç—Å—è –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–º —á–∏—Å–ª–µ\n"
        f"‚ñ´Ô∏è –í—ã–∏–≥—Ä—ã—à –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ —Å—Ç–∞–≤–∫–∏ –∏ –º–Ω–æ–∂–∏—Ç–µ–ª—è\n"
        f"‚ñ´Ô∏è –ü—Ä—è–º–∞—è —Å—Ç–∞–≤–∫–∞ –Ω–∞ —á–∏—Å–ª–æ: x36\n"
        f"‚ñ´Ô∏è –°—Ç–∞–≤–∫–∞ –Ω–∞ —Ü–≤–µ—Ç/—á—ë—Ç–Ω–æ—Å—Ç—å: x2\n"
        f"‚ñ´Ô∏è –°—Ç–∞–≤–∫–∞ –Ω–∞ —Å–µ–∫—Ç–æ—Ä: x2-x3</blockquote>\n\n"
        f"üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {user['balance']} –º–æ–Ω–µ—Ç\n\n"
        f"<i>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏:</i>",
        keyboard
    )
    
    await state.set_state(FootballRouletteStates.choosing_bet)

@router.callback_query(F.data.startswith("roulette_bet:"))
async def set_roulette_bet(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞–≤–∫–∏ –∏ –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Å—Ç–∞–≤–∫–∏"""
    bet_amount = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    
    user_info = await get_user_by_id(user_id)
    if user_info['balance'] < bet_amount:
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!", show_alert=True)
        return
    
    await state.update_data(bet_amount=bet_amount)
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø —Å—Ç–∞–≤–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî¢ –ù–∞ —á–∏—Å–ª–æ", callback_data="bet_type:number")],
        [InlineKeyboardButton(text="üé® –ù–∞ —Ü–≤–µ—Ç", callback_data="bet_type:color")],
        [InlineKeyboardButton(text="üìä –ù–∞ —Å–µ–∫—Ç–æ—Ä", callback_data="bet_type:sector")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="open_roulette")]
    ])
    
    await safe_edit_message(
        callback,
        f"üé∞ <b>–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: {bet_amount} –º–æ–Ω–µ—Ç</b>\n\n"
        f"<i>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏:</i>\n\n"
        f"üî¢ <b>–ù–∞ —á–∏—Å–ª–æ:</b> x36 (–ø—Ä—è–º–∞—è —Å—Ç–∞–≤–∫–∞)\n"
        f"üé® <b>–ù–∞ —Ü–≤–µ—Ç:</b> x2 (–∫—Ä–∞—Å–Ω—ã–π/—á–µ—Ä–Ω—ã–π)\n"
        f"üìä <b>–ù–∞ —Å–µ–∫—Ç–æ—Ä:</b> x2-x3 (—á—ë—Ç–Ω—ã–µ/–Ω–µ—á—ë—Ç–Ω—ã–µ, 1-18 –∏ —Ç.–¥.)",
        keyboard
    )
    
    await state.set_state(FootballRouletteStates.choosing_bet_type)

@router.callback_query(F.data.startswith("bet_type:"))
async def choose_bet_type(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ —Å—Ç–∞–≤–∫–∏"""
    bet_type = callback.data.split(":")[1]
    state_data = await state.get_data()
    bet_amount = state_data['bet_amount']
    
    if bet_type == "number":
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —á–∏—Å–ª–∞–º–∏ —Ä—É–ª–µ—Ç–∫–∏ (–≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 12 —á–∏—Å–µ–ª)
        number_buttons = []
        row = []
        for i in range(37):  # 0-36
            color = ROULETTE_COLORS[i]
            row.append(InlineKeyboardButton(
                text=f"{color}{i}",
                callback_data=f"number_bet:{i}"
            ))
            if len(row) == 6:  # 6 —á–∏—Å–µ–ª –≤ —Å—Ç—Ä–æ–∫–µ
                number_buttons.append(row)
                row = []
        if row:  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ–∫—É
            number_buttons.append(row)
        
        number_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"roulette_bet:{bet_amount}")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=number_buttons)
        
        await safe_edit_message(
            callback,
            f"üé∞ <b>–°—Ç–∞–≤–∫–∞ –Ω–∞ —á–∏—Å–ª–æ</b> | {bet_amount} –º–æ–Ω–µ—Ç\n\n"
            f"<i>–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 36:</i>\n"
            f"üü¢ 0 - –∑–µ–ª—ë–Ω—ã–π (–¥–∂–µ–∫–ø–æ—Ç)\n"
            f"üî¥ –ù–µ—á—ë—Ç–Ω—ã–µ - –∫—Ä–∞—Å–Ω—ã–µ\n"
            f"‚ö´ –ß—ë—Ç–Ω—ã–µ - —á—ë—Ä–Ω—ã–µ\n\n"
            f"<b>–ú–Ω–æ–∂–∏—Ç–µ–ª—å: x36</b>",
            keyboard
        )
        await state.set_state(FootballRouletteStates.choosing_number)
        
    elif bet_type == "color":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üî¥ –ö—Ä–∞—Å–Ω—ã–µ (x2)", callback_data="color_bet:red")],
            [InlineKeyboardButton(text="‚ö´ –ß—ë—Ä–Ω—ã–µ (x2)", callback_data="color_bet:black")],
            [InlineKeyboardButton(text="üü¢ –ó–µ–ª—ë–Ω—ã–π (x36)", callback_data="color_bet:green")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"roulette_bet:{bet_amount}")]
        ])
        
        await safe_edit_message(
            callback,
            f"üé∞ <b>–°—Ç–∞–≤–∫–∞ –Ω–∞ —Ü–≤–µ—Ç</b> | {bet_amount} –º–æ–Ω–µ—Ç\n\n"
            f"<i>–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:</i>\n\n"
            f"üî¥ <b>–ö—Ä–∞—Å–Ω—ã–µ:</b> x2 (–≤—Å–µ –Ω–µ—á—ë—Ç–Ω—ã–µ —á–∏—Å–ª–∞)\n"
            f"‚ö´ <b>–ß—ë—Ä–Ω—ã–µ:</b> x2 (–≤—Å–µ —á—ë—Ç–Ω—ã–µ —á–∏—Å–ª–∞)\n"
            f"üü¢ <b>–ó–µ–ª—ë–Ω—ã–π:</b> x36 (—Ç–æ–ª—å–∫–æ 0)",
            keyboard
        )
        await state.set_state(FootballRouletteStates.choosing_color)
        
    elif bet_type == "sector":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="1-12 (x3)", callback_data="sector_bet:1st_12")],
            [InlineKeyboardButton(text="13-24 (x3)", callback_data="sector_bet:2nd_12")],
            [InlineKeyboardButton(text="25-36 (x3)", callback_data="sector_bet:3rd_12")],
            [InlineKeyboardButton(text="1-18 (x2)", callback_data="sector_bet:1-18")],
            [InlineKeyboardButton(text="19-36 (x2)", callback_data="sector_bet:19-36")],
            [InlineKeyboardButton(text="–ß—ë—Ç–Ω—ã–µ (x2)", callback_data="sector_bet:even")],
            [InlineKeyboardButton(text="–ù–µ—á—ë—Ç–Ω—ã–µ (x2)", callback_data="sector_bet:odd")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"roulette_bet:{bet_amount}")]
        ])
        
        await safe_edit_message(
            callback,
            f"üé∞ <b>–°—Ç–∞–≤–∫–∞ –Ω–∞ —Å–µ–∫—Ç–æ—Ä</b> | {bet_amount} –º–æ–Ω–µ—Ç\n\n"
            f"<i>–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∫—Ç–æ—Ä:</i>\n\n"
            f"üìä <b>–î—é–∂–∏–Ω—ã:</b> x3 (1-12, 13-24, 25-36)\n"
            f"üî¢ <b>–ü–æ–ª–æ–≤–∏–Ω—ã:</b> x2 (1-18, 19-36)\n"
            f"‚öñÔ∏è <b>–ß—ë—Ç–Ω–æ—Å—Ç—å:</b> x2 (—á—ë—Ç–Ω—ã–µ/–Ω–µ—á—ë—Ç–Ω—ã–µ)",
            keyboard
        )
        await state.set_state(FootballRouletteStates.choosing_sector)

@router.callback_query(F.data.startswith("number_bet:"))
async def place_number_bet(callback: CallbackQuery, state: FSMContext):
    """–°—Ç–∞–≤–∫–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ"""
    chosen_number = int(callback.data.split(":")[1])
    state_data = await state.get_data()
    bet_amount = state_data['bet_amount']
    
    await state.update_data(
        bet_type="number",
        chosen_number=chosen_number,
        multiplier=36
    )
    
    color = ROULETTE_COLORS[chosen_number]
    await safe_edit_message(
        callback,
        f"üé∞ <b>–°—Ç–∞–≤–∫–∞ –Ω–∞ —á–∏—Å–ª–æ:</b> {color}{chosen_number}\n"
        f"üí∞ <b>–°—Ç–∞–≤–∫–∞:</b> {bet_amount} –º–æ–Ω–µ—Ç\n"
        f"üìà <b>–ú–Ω–æ–∂–∏—Ç–µ–ª—å:</b> x36\n\n"
        f"<i>–ú—è—á —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –ø–æ–ª–µ...</i>"
    )
    
    await asyncio.sleep(1)
    await spin_roulette(callback, state)

@router.callback_query(F.data.startswith("color_bet:"))
async def place_color_bet(callback: CallbackQuery, state: FSMContext):
    """–°—Ç–∞–≤–∫–∞ –Ω–∞ —Ü–≤–µ—Ç"""
    color = callback.data.split(":")[1]
    state_data = await state.get_data()
    bet_amount = state_data['bet_amount']
    
    if color == "green":
        multiplier = 36
        bet_type = "number"
        chosen_number = 0
    else:
        multiplier = 2
        bet_type = "color"
        chosen_number = None
    
    await state.update_data(
        bet_type=bet_type,
        chosen_color=color,
        chosen_number=chosen_number,
        multiplier=multiplier
    )
    
    color_emoji = "üü¢" if color == "green" else "üî¥" if color == "red" else "‚ö´"
    await safe_edit_message(
        callback,
        f"üé∞ <b>–°—Ç–∞–≤–∫–∞ –Ω–∞ —Ü–≤–µ—Ç:</b> {color_emoji} {color.capitalize()}\n"
        f"üí∞ <b>–°—Ç–∞–≤–∫–∞:</b> {bet_amount} –º–æ–Ω–µ—Ç\n"
        f"üìà <b>–ú–Ω–æ–∂–∏—Ç–µ–ª—å:</b> x{multiplier}\n\n"
        f"<i>–ú—è—á —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –ø–æ–ª–µ...</i>"
    )
    
    await asyncio.sleep(1)
    await spin_roulette(callback, state)

@router.callback_query(F.data.startswith("sector_bet:"))
async def place_sector_bet(callback: CallbackQuery, state: FSMContext):
    """–°—Ç–∞–≤–∫–∞ –Ω–∞ —Å–µ–∫—Ç–æ—Ä"""
    sector = callback.data.split(":")[1]
    state_data = await state.get_data()
    bet_amount = state_data['bet_amount']
    sector_info = ROULETTE_SECTORS[sector]
    
    await state.update_data(
        bet_type="sector",
        chosen_sector=sector,
        multiplier=sector_info['multiplier']
    )
    
    await safe_edit_message(
        callback,
        f"üé∞ <b>–°—Ç–∞–≤–∫–∞ –Ω–∞ —Å–µ–∫—Ç–æ—Ä:</b> {sector_info['name']}\n"
        f"üí∞ <b>–°—Ç–∞–≤–∫–∞:</b> {bet_amount} –º–æ–Ω–µ—Ç\n"
        f"üìà <b>–ú–Ω–æ–∂–∏—Ç–µ–ª—å:</b> x{sector_info['multiplier']}\n\n"
        f"<i>–ú—è—á —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –ø–æ–ª–µ...</i>"
    )
    
    await asyncio.sleep(1)
    await spin_roulette(callback, state)

async def spin_roulette(callback: CallbackQuery, state: FSMContext):
    """–ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è —Ä—É–ª–µ—Ç–∫–∏"""
    state_data = await state.get_data()
    bet_amount = state_data['bet_amount']
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω–æ–µ —á–∏—Å–ª–æ
    winning_number = random.choice(ROULETTE_NUMBERS)
    winning_color = ROULETTE_COLORS[winning_number]
    
    # –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è
    for i in range(12):  # 12 –∫–∞–¥—Ä–æ–≤ –∞–Ω–∏–º–∞—Ü–∏–∏
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞ –≤–æ –≤—Ä–µ–º—è –≤—Ä–∞—â–µ–Ω–∏—è
        temp_numbers = [random.choice(ROULETTE_NUMBERS) for _ in range(5)]
        temp_colors = [ROULETTE_COLORS[num] for num in temp_numbers]
        
        spin_text = (
            f"üé∞ <b>–†–£–õ–ï–¢–ö–ê –í–†–ê–©–ê–ï–¢–°–Ø...</b>\n\n"
            f"‚öΩ –ú—è—á –ª–µ—Ç–∏—Ç –Ω–∞–¥ —á–∏—Å–ª–∞–º–∏:\n"
            f"{' '.join([f'{color}{num}' for color, num in zip(temp_colors, temp_numbers)])}\n\n"
            f"<i>{random.choice(ROULETTE_PHRASES['spin'])}</i>"
        )
        
        await safe_edit_message(callback, spin_text)
        await asyncio.sleep(0.5 + i * 0.1)  # –ó–∞–º–µ–¥–ª—è–µ–º—Å—è
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await show_roulette_result(callback, state, winning_number, winning_color)

async def show_roulette_result(callback: CallbackQuery, state: FSMContext, winning_number: int, winning_color: str):
    """–ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä—É–ª–µ—Ç–∫–∏"""
    state_data = await state.get_data()
    bet_amount = state_data['bet_amount']
    user_id = callback.from_user.id
    bet_type = state_data.get('bet_type')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∏–≥—Ä—ã—à
    win_amount = 0
    result = "lose"
    win_description = ""
    
    if bet_type == "number":
        chosen_number = state_data.get('chosen_number')
        if chosen_number == winning_number:
            win_amount = bet_amount * state_data['multiplier']
            result = "win"
            win_description = f"–ü—Ä—è–º–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ {winning_color}{winning_number}!"
        else:
            win_description = f"–í—ã–ø–∞–ª–æ {winning_color}{winning_number}, –∞ –≤—ã —Å—Ç–∞–≤–∏–ª–∏ –Ω–∞ {ROULETTE_COLORS[chosen_number]}{chosen_number}"
            
    elif bet_type == "color":
        chosen_color = state_data.get('chosen_color')
        if (chosen_color == "red" and winning_color == "üî¥") or \
           (chosen_color == "black" and winning_color == "‚ö´") or \
           (chosen_color == "green" and winning_number == 0):
            win_amount = bet_amount * state_data['multiplier']
            result = "win"
            win_description = f"–¶–≤–µ—Ç —Å–æ–≤–ø–∞–ª! –í—ã–ø–∞–ª {winning_color}"
        else:
            win_description = f"–í—ã–ø–∞–ª {winning_color}, –∞ –≤—ã —Å—Ç–∞–≤–∏–ª–∏ –Ω–∞ {chosen_color}"
            
    elif bet_type == "sector":
        chosen_sector = state_data.get('chosen_sector')
        sector_info = ROULETTE_SECTORS[chosen_sector]
        
        is_win = False
        if 'range' in sector_info:
            is_win = winning_number in sector_info['range']
        elif 'condition' in sector_info:
            is_win = sector_info['condition'](winning_number)
            
        if is_win:
            win_amount = bet_amount * state_data['multiplier']
            result = "win"
            win_description = f"–°–µ–∫—Ç–æ—Ä {sector_info['name']} —Å—ã–≥—Ä–∞–ª!"
        else:
            win_description = f"–í—ã–ø–∞–ª–æ {winning_number}, –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ {sector_info['name']}"
    
    # –ù–∞—á–∏—Å–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à
    if win_amount > 0:
        await update_user_balance(user_id, win_amount)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
    await save_game_result(
        user_id=user_id,
        game_type="football_roulette",
        result=result,
        bet_amount=bet_amount,
        win_amount=win_amount,
        player_score=0,
        opponent_score=0
    )
    
    user_info = await get_user_by_id(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    if win_amount > 0:
        if winning_number == 0:
            result_text = f"üéâ <b>–î–ñ–ï–ö–ü–û–¢! –ó–ï–õ–Å–ù–´–ô –ù–û–õ–¨!</b> +{win_amount} –º–æ–Ω–µ—Ç!"
            phrase = random.choice(ROULETTE_PHRASES['jackpot'])
        else:
            result_text = f"üéä <b>–í–´–ò–ì–†–´–®!</b> +{win_amount} –º–æ–Ω–µ—Ç!"
            phrase = random.choice(ROULETTE_PHRASES['win'])
    else:
        result_text = "üò¢ <b>–ü–†–û–ò–ì–†–´–®</b>"
        phrase = random.choice(ROULETTE_PHRASES['lose'])
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé∞ –ö—Ä—É—Ç–∏—Ç—å –µ—â—ë —Ä–∞–∑", callback_data=f"roulette_bet:{bet_amount}")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="roulette_stats")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")],
    ])
    
    await safe_edit_message(
        callback,
        f"üé∞ <b>–†–ï–ó–£–õ–¨–¢–ê–¢ –†–£–õ–ï–¢–ö–ò</b>\n\n"
        f"‚öΩ <b>–í—ã–ø–∞–ª–æ:</b> {winning_color}{winning_number}\n\n"
        f"üìù <b>–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞:</b> {bet_amount} –º–æ–Ω–µ—Ç\n"
        f"üìà <b>–ú–Ω–æ–∂–∏—Ç–µ–ª—å:</b> x{state_data.get('multiplier', 1)}\n\n"
        f"üí¨ <b>{win_description}</b>\n\n"
        f"üéôÔ∏è <i>\"{phrase}\"</i>\n\n"
        f"üí∞ <b>{result_text}</b>\n"
        f"üè¶ –ë–∞–ª–∞–Ω—Å: <b>{user_info['balance']} –º–æ–Ω–µ—Ç</b>\n\n"
        f"<i>–£–¥–∞—á–∞ –ª—é–±–∏—Ç —Å–º–µ–ª—ã—Ö! üçÄ</i>",
        keyboard
    )
    
    await state.set_state(FootballRouletteStates.result)