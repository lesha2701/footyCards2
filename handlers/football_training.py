from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import random
import asyncio
from datetime import datetime, timedelta
import re

from db.user_queries import get_user_by_id, update_user_balance, update_user_trophies
from db.game_queries import save_training_result, get_training_stats, check_training_cooldown

router = Router()

class FootballTrainingStates(StatesGroup):
    choosing_drill = State()
    memory_challenge = State()
    memory_challenge_playing = State()
    dribbling_challenge = State()

# –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å –Ω–∞–≥—Ä–∞–¥–∞–º–∏
TRAINING_DRILLS = {
    'memory_challenge': {
        'name': 'üß† –§—É—Ç–±–æ–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å',
        'description': '–ó–∞–ø–æ–º–Ω–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –ø–æ–≤—Ç–æ—Ä–∏ –µ—ë',
        'reward': 150,  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞
        'cooldown': timedelta(minutes=10)
    },
    'dribbling_challenge': {
        'name': 'üåÄ –û–±–≤–æ–¥–∫–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤',
        'description': '–ü—Ä–æ–≤–µ–¥–∏ –º—è—á –º–∏–º–æ –∑–∞—â–∏—Ç–Ω–∏–∫–æ–≤',
        'reward': 150,
        'cooldown': timedelta(minutes=10)
    }
}

# –§—É—Ç–±–æ–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã —Ç—Ä–µ–Ω–µ—Ä–∞
COACH_PHRASES = {
    'welcome': [
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É! –ì–æ—Ç–æ–≤ —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏? ‚öΩ",
        "–ù–∞ –ø–æ–ª–µ –ø–æ—Ä–∞–±–æ—Ç–∞–µ–º! –ü–æ–∫–∞–∂–∏, –Ω–∞ —á—Ç–æ —Å–ø–æ—Å–æ–±–µ–Ω! üí™",
        "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ - –ø—É—Ç—å –∫ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É! –ù–∞—á–Ω—ë–º? üèÉ‚Äç‚ôÇÔ∏è",
        "–§—É—Ç–±–æ–ª—å–Ω–æ–µ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å–∞–º–æ! –ó–∞ —Ä–∞–±–æ—Ç—É! üî•",
        "–°–µ–≥–æ–¥–Ω—è –±—É–¥–µ–º –æ—Ç—Ç–∞—á–∏–≤–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫—É! –í—ã–±–∏—Ä–∞–π —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ! üéØ",
        "–†–∞–∑–º–∏–Ω–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞, –ø–æ—Ä–∞ –∫ –¥–µ–ª—É! –í—ã–±–∏—Ä–∞–π —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ! üî•",
        "–§—É—Ç–±–æ–ª - —ç—Ç–æ –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–æ–≥–∏, –Ω–æ –∏ –≥–æ–ª–æ–≤–∞! –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–≤–æ—é –ø–∞–º—è—Ç—å! üß†"
    ],
    'success': [
        "–û—Ç–ª–∏—á–Ω–æ! –ù–∞—Å—Ç–æ—è—â–∏–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª! üëè",
        "–ë—Ä–∞–≤–æ! –¢–µ—Ö–Ω–∏–∫–∞ –Ω–∞ –≤—ã—Å—à–µ–º —É—Ä–æ–≤–Ω–µ! ‚≠ê",
        "–í–æ—Ç —ç—Ç–æ –¥–∞! –¢—ã —Ä–æ–∂–¥—ë–Ω –¥–ª—è —Ñ—É—Ç–±–æ–ª–∞! üåü",
        "–ò–¥–µ–∞–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üí´",
        "–ú–∞—Å—Ç–µ—Ä—Å–∫–∏–π –ø—Ä–∏—ë–º! –¢—Ä–µ–Ω–µ—Ä –≥–æ—Ä–¥–∏—Ç—Å—è! üèÜ",
        "–§–µ–Ω–æ–º–µ–Ω–∞–ª—å–Ω–æ! –¢–∞–∫–æ–π –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ —è –¥–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª! üî•",
        "–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! –¢—ã –ø—Ä–æ—Å—Ç–æ –º–∞—à–∏–Ω–∞! üöÄ",
        "–ü–æ—Ç—Ä—è—Å–∞—é—â–µ! –° —Ç–∞–∫–∏–º –ø–æ–¥—Ö–æ–¥–æ–º —Ç—ã —Å—Ç–∞–Ω–µ—à—å –∑–≤–µ–∑–¥–æ–π! üå†",
        "–ò–∑—É–º–∏—Ç–µ–ª—å–Ω–æ! –¢–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –ø–æ—Ä–∞–∂–∞—é—Ç! üíé",
        "–ë–µ–∑—É–ø—Ä–µ—á–Ω–æ! –ù–∞—Å—Ç–æ—è—â–∏–π –º–∞—Å—Ç–µ—Ä —Å–≤–æ–µ–≥–æ –¥–µ–ª–∞! üèÖ"
    ],
    'failure': [
        "–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è! –ü—Ä–∞–∫—Ç–∏–∫–∞ –¥–µ–ª–∞–µ—Ç —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–º! üí™",
        "–ë—ã–ª–æ –±–ª–∏–∑–∫–æ! –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–ª—É—á–∏—Ç—Å—è! üîÑ",
        "–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è! –ù–µ —Å–¥–∞–≤–∞–π—Å—è! ‚öΩ",
        "–û—à–∏–±–∞—Ç—å—Å—è - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ! –ì–ª–∞–≤–Ω–æ–µ - —É—á–∏—Ç—å—Å—è! üìö",
        "–°–ª–æ–∂–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ! ‚è≥",
        "–ù–µ –≤–µ—à–∞–π –Ω–æ—Å! –î–∞–∂–µ –ª—É—á—à–∏–µ –æ—à–∏–±–∞—é—Ç—Å—è! üåà",
        "–≠—Ç–æ –≤—Å–µ–≥–æ –ª–∏—à—å –Ω–µ–±–æ–ª—å—à–∞—è –Ω–µ—É–¥–∞—á–∞! –í—Å—Ç–∞–Ω—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π! üöÄ",
        "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ - —ç—Ç–æ –ø—É—Ç—å! –ö–∞–∂–¥–∞—è –æ—à–∏–±–∫–∞ - —à–∞–≥ –≤–ø–µ—Ä—ë–¥! üõ£Ô∏è",
        "–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π! –ó–∞–≤—Ç—Ä–∞ –ø–æ–ª—É—á–∏—Ç—Å—è –ª—É—á—à–µ! ‚òÄÔ∏è",
        "–°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Å—è! –¢—ã —Å–º–æ–∂–µ—à—å! üí´"
    ],
    'memory_instructions': [
        "–ó–∞–ø–æ–º–Ω–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–∫ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –ø–æ–ª–µ! üß†",
        "–í–Ω–∏–º–∞–Ω–∏–µ! –ó–∞–ø–æ–º–∏–Ω–∞–π –ø–æ—Ä—è–¥–æ–∫ –∫–∞–∫ —Ç–∞–∫—Ç–∏–∫—É —Ç—Ä–µ–Ω–µ—Ä–∞! üìã",
        "–°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è! –≠—Ç–æ –∫–∞–∫ –∑–∞–ø–æ–º–Ω–∏—Ç—å —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫—É –∫–æ–º–∞–Ω–¥—ã! üîç",
        "–ó–∞–ø–æ–º–Ω–∏ —ç—Ç—É –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∫–∞–∫ –ª—É—á—à–∏–π –ø–∞—Å! ‚öΩ",
        "–î–µ—Ä–∂–∏ –≤ –≥–æ–ª–æ–≤–µ —ç—Ç—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–∫ —Å—Ö–µ–º—É –∞—Ç–∞–∫–∏! üß†",
        "–ó–∞–ø–æ–º–∏–Ω–∞–π! –≠—Ç–æ —Ç–≤–æ–π –∫–ª—é—á –∫ —É—Å–ø–µ—Ö—É! üîë",
        "–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–º–æ—Ç—Ä–∏! –≠—Ç–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è –ø—Ä–∏–Ω–µ—Å–µ—Ç –ø–æ–±–µ–¥—É! üëÄ",
        "–ó–∞–ø–æ–º–Ω–∏ –ø–æ—Ä—è–¥–æ–∫ –∫–∞–∫ –Ω–æ–º–µ—Ä–∞ –∏–≥—Ä–æ–∫–æ–≤! üî¢",
        "–°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Å—è! –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è —Ç–≤–æ–µ–π –∏–≥—Ä—ã! üí°",
        "–ó–∞–ø–æ–º–∏–Ω–∞–π –±—ã—Å—Ç—Ä–æ! –ö–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª! ‚ö°"
    ],
    'memory_success': [
        "–í–µ—Ä–Ω–æ! –û—Ç–ª–∏—á–Ω–∞—è –ø–∞–º—è—Ç—å! üß†",
        "–¢–æ—á–Ω–æ! –¢—ã –∑–∞–ø–æ–º–Ω–∏–ª –∏–¥–µ–∞–ª—å–Ω–æ! ‚úÖ",
        "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–∞–º—è—Ç—å –∫–∞–∫ —É —Å–∫–∞—É—Ç–∞! üîç",
        "–í —è–±–ª–æ—á–∫–æ! –û—Ç–ª–∏—á–Ω–∞—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è! üéØ",
        "–ò–¥–µ–∞–ª—å–Ω–æ! –¢–≤–æ—è –ø–∞–º—è—Ç—å –Ω–µ –ø–æ–¥–≤–æ–¥–∏—Ç! üí´",
        "–ë—Ä–∞–≤–æ! –¢—ã –≤—Å–ø–æ–º–Ω–∏–ª –≤—Å—ë —Ç–æ—á–Ω–æ! üëè",
        "–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! –ü–∞–º—è—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –æ—Ç–ª–∏—á–Ω–æ! üåü",
        "–°—É–ø–µ—Ä! –¢—ã –Ω–µ –æ—à–∏–±—Å—è! üöÄ",
        "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –°–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç? üíé",
        "–û—Ç–ª–∏—á–Ω–æ! –î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ! üî•"
    ],
    'cooldown': [
        "–û—Ç–ª–∏—á–Ω–æ –ø–æ—Ä–∞–±–æ—Ç–∞–ª! –î–∞–≤–∞–π –æ—Ç–¥–æ—Ö–Ω—ë–º –Ω–µ–º–Ω–æ–≥–æ! ‚òï",
        "–ú—ã—à—Ü—ã —É—Å—Ç–∞–ª–∏! –ù—É–∂–µ–Ω –ø–µ—Ä–µ—Ä—ã–≤! üèñÔ∏è",
        "–•–æ—Ä–æ—à–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞! –í–µ—Ä–Ω—ë–º—Å—è –∫ –Ω–µ–π –ø–æ–∑–∂–µ! ‚è∞",
        "–ù–µ –ø–µ—Ä–µ—Ç—Ä—É–∂–¥–∞–π—Å—è! –û—Ç–¥—ã—Ö - —á–∞—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏! üò¥",
        "–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –î–∞–≤–∞–π –ø–µ—Ä–µ–¥–æ—Ö–Ω—ë–º! üåø",
        "–ù–∞ —Å–µ–≥–æ–¥–Ω—è —Ö–≤–∞—Ç–∏—Ç! –ó–∞–≤—Ç—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∏–º! üåô",
        "–£—Å—Ç–∞–ª–æ—Å—Ç—å - –ø—Ä–∏–∑–Ω–∞–∫ —Ö–æ—Ä–æ—à–µ–π —Ä–∞–±–æ—Ç—ã! –û—Ç–¥–æ—Ö–Ω–∏! üí§",
        "–¢—ã —Ö–æ—Ä–æ—à–æ –ø–æ—Ç—Ä—É–¥–∏–ª—Å—è! –í—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏–ª—ã! ‚ö°",
        "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üèÜ",
        "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ! –ì–æ—Ä–∂—É—Å—å —Ç–≤–æ–∏–º–∏ —É—Å–ø–µ—Ö–∞–º–∏! üåü"
    ]
}

async def safe_edit_message(callback: CallbackQuery, text: str, reply_markup=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await callback.message.edit_text(text, reply_markup=reply_markup, parse_mode="HTML")
    except:
        pass

async def show_training_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    user_id = callback.from_user.id
    stats = await get_training_stats(user_id)
    
    stats_text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</b>\n\n"
        f"<blockquote>üéØ –í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {stats['total_trainings']}\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {stats['successful']}\n"
        f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats['success_rate']}%\n"
        f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['total_earned']} –º–æ–Ω–µ—Ç</blockquote>\n\n"
        f"<i>–ü—Ä–æ–¥–æ–ª–∂–∞–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤!</i>"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º", callback_data="back_to_training")]
    ])
    
    await safe_edit_message(callback, stats_text, keyboard)

@router.callback_query(F.data == "training_stats")
async def handle_training_stats(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    await show_training_stats(callback)

@router.callback_query(F.data == "back_to_training")
async def back_to_training(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    await start_football_training(callback, state)

@router.callback_query(F.data == "open_training")
async def start_football_training(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    user_id = callback.from_user.id
    user_info = await get_user_by_id(user_id)
    
    coach_phrase = random.choice(COACH_PHRASES['welcome'])
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    drill_buttons = []
    for drill_id, drill_info in TRAINING_DRILLS.items():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–¥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        cooldown_info = await check_training_cooldown(user_id, drill_id)
        
        if cooldown_info['available']:
            button_text = f"{drill_info['name']} - üü¢ –î–æ—Å—Ç—É–ø–Ω–æ"
        else:
            time_left = cooldown_info['time_left']
            hours = int(time_left // 3600)
            minutes = int((time_left % 3600) // 60)
            button_text = f"{drill_info['name']} - ‚è≥ {hours:02d}:{minutes:02d}"
        
        drill_buttons.append([InlineKeyboardButton(
            text=button_text,
            callback_data=f"start_drill:{drill_id}" if cooldown_info['available'] else "cooldown_info"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –Ω–∞–∑–∞–¥
    drill_buttons.append([
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="training_stats"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=drill_buttons)
    
    await safe_edit_message(
        callback,
        f"‚öΩ <b>–§–£–¢–ë–û–õ–¨–ù–´–ï –¢–†–ï–ù–ò–†–û–í–ö–ò</b>\n\n"
        f"üë®‚Äçüè´ <i>\"{coach_phrase}\"</i>\n\n"
        f"üí™ <b>–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –º–æ–Ω–µ—Ç—ã, —É–ª—É—á—à–∞–π –Ω–∞–≤—ã–∫–∏!</b>\n\n"
        f"üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:</b>\n"
        f"<blockquote>üß† –§—É—Ç–±–æ–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å - 120 –º–æ–Ω–µ—Ç\n"
        f"üåÄ –û–±–≤–æ–¥–∫–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤ - 150 –º–æ–Ω–µ—Ç</blockquote>\n\n"
        f"üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {user_info['balance']} –º–æ–Ω–µ—Ç\n\n"
        f"<i>–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:</i>",
        keyboard
    )
    
    await state.set_state(FootballTrainingStates.choosing_drill)

@router.callback_query(F.data.startswith("start_drill:"))
async def start_drill(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    drill_id = callback.data.split(":")[1]
    
    await state.update_data(
        drill_id=drill_id,
        potential_reward=TRAINING_DRILLS[drill_id]['reward']
    )
    
    if drill_id == 'memory_challenge':
        await start_memory_challenge(callback, state)
    elif drill_id == 'dribbling_challenge':
        await start_dribbling_challenge(callback, state)

# 1. –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: –§—É—Ç–±–æ–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
async def start_memory_challenge(callback: CallbackQuery, state: FSMContext):
    """–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–∞ —Ñ—É—Ç–±–æ–ª—å–Ω—É—é –ø–∞–º—è—Ç—å"""
    # –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ 4 emoji
    football_emojis = ["‚öΩ", "ü•Ö", "üëü", "üèÜ", "üéØ", "üß§", "‚≠ê", "üëï", "ü©≥", "ü•æ"]
    sequence = random.sample(football_emojis, 4)
    
    await state.update_data(
        memory_sequence=sequence,
        memory_current_step=0,
        memory_start_time=datetime.now()
    )
    
    instruction_phrase = random.choice(COACH_PHRASES['memory_instructions'])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÆ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data="memory_start_test")]
    ])
    
    await safe_edit_message(
        callback,
        f"üß† <b>–§–£–¢–ë–û–õ–¨–ù–ê–Ø –ü–ê–ú–Ø–¢–¨</b>\n\n"
        f"üéØ <b>–ó–∞–¥–∞–Ω–∏–µ:</b> –ó–∞–ø–æ–º–Ω–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ 4 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –ø–æ–≤—Ç–æ—Ä–∏ –µ—ë!\n"
        f"üí∞ <b>–ù–∞–≥—Ä–∞–¥–∞:</b> 120 –º–æ–Ω–µ—Ç\n\n"
        f"üë®‚Äçüè´ <i>\"{instruction_phrase}\"</i>\n\n"
        f"<b>–ó–∞–ø–æ–º–Ω–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b>\n"
        f"{' ‚Üí '.join(sequence)}\n\n"
        f"<i>–£ —Ç–µ–±—è –µ—Å—Ç—å 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ù–∞–∂–º–∏ '–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç' –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤!</i>",
        keyboard
    )
    
    await state.set_state(FootballTrainingStates.memory_challenge)

@router.callback_query(F.data == "memory_start_test", FootballTrainingStates.memory_challenge)
async def start_memory_test(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ –ø–∞–º—è—Ç–∏"""
    state_data = await state.get_data()
    sequence = state_data['memory_sequence']
    
    # –°–æ–∑–¥–∞–µ–º 6 –∫–Ω–æ–ø–æ–∫ —Å —Ä–∞–∑–Ω—ã–º–∏ emoji (–æ–¥–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è)
    all_emojis = ["‚öΩ", "ü•Ö", "üëü", "üèÜ", "üéØ", "üß§", "‚≠ê", "üëï", "ü©≥", "ü•æ"]
    wrong_emojis = [e for e in all_emojis if e != sequence[0]]
    random.shuffle(wrong_emojis)
    
    # –ë–µ—Ä–µ–º 5 –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö emoji
    options = [sequence[0]] + wrong_emojis[:5]
    random.shuffle(options)
    
    buttons = []
    for emoji in options:
        is_correct = 1 if emoji == sequence[0] else 0
        buttons.append(InlineKeyboardButton(
            text=emoji, 
            callback_data=f"memory_guess:{is_correct}"
        ))
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ 2 —Å—Ç—Ä–æ–∫–∏ –ø–æ 3 –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        buttons[:3],
        buttons[3:]
    ])
    
    await safe_edit_message(
        callback,
        f"üß† <b>–§–£–¢–ë–û–õ–¨–ù–ê–Ø –ü–ê–ú–Ø–¢–¨</b> | –®–∞–≥ 1/4\n\n"
        f"‚è∞ <b>–í—Ä–µ–º—è –Ω–∞—á–∞–ª–æ—Å—å!</b> –í—Å–ø–æ–º–∏–Ω–∞–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å!\n\n"
        f"<b>–ö–∞–∫–æ–π –±—ã–ª –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç?</b>",
        keyboard
    )
    
    await state.set_state(FootballTrainingStates.memory_challenge_playing)

@router.callback_query(F.data.startswith("memory_guess:"), FootballTrainingStates.memory_challenge_playing)
async def handle_memory_guess(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤ —Ç–µ—Å—Ç–µ –ø–∞–º—è—Ç–∏"""
    state_data = await state.get_data()
    sequence = state_data['memory_sequence']
    current_step = state_data.get('memory_current_step', 0)
    is_correct = int(callback.data.split(":")[1])
    
    if not is_correct:
        await handle_training_failure(callback, state, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏!")
        return
    
    current_step += 1
    await state.update_data(memory_current_step=current_step)
    
    success_phrase = random.choice(COACH_PHRASES['memory_success'])
    
    if current_step >= len(sequence):
        # –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏
        end_time = datetime.now()
        time_taken = (end_time - state_data['memory_start_time']).total_seconds()
        
        # –ë–æ–Ω—É—Å –∑–∞ —Å–∫–æ—Ä–æ—Å—Ç—å (—á–µ–º –±—ã—Å—Ç—Ä–µ–µ, —Ç–µ–º –±–æ–ª—å—à–µ –±–æ–Ω—É—Å)
        time_bonus = max(0, int(30 - time_taken))
        total_reward = state_data['potential_reward'] + time_bonus
        
        achievement = f"–û—Ç–ª–∏—á–Ω–∞—è –ø–∞–º—è—Ç—å! –í—Ä–µ–º—è: {time_taken:.1f}—Å!"
        if time_bonus > 0:
            achievement += f" +{time_bonus} –º–æ–Ω–µ—Ç –∑–∞ —Å–∫–æ—Ä–æ—Å—Ç—å! ‚ö°"
            
        await handle_training_success(callback, state, total_reward, achievement)
        return
    
    # –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    next_emoji = sequence[current_step]
    all_emojis = ["‚öΩ", "ü•Ö", "üëü", "üèÜ", "üéØ", "üß§", "‚≠ê", "üëï", "ü©≥", "ü•æ"]
    wrong_emojis = [e for e in all_emojis if e != next_emoji]
    random.shuffle(wrong_emojis)
    
    # –ë–µ—Ä–µ–º 5 –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö emoji
    options = [next_emoji] + wrong_emojis[:5]
    random.shuffle(options)
    
    buttons = []
    for emoji in options:
        is_correct = 1 if emoji == next_emoji else 0
        buttons.append(InlineKeyboardButton(
            text=emoji, 
            callback_data=f"memory_guess:{is_correct}"
        ))
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ 2 —Å—Ç—Ä–æ–∫–∏ –ø–æ 3 –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        buttons[:3],
        buttons[3:]
    ])
    
    await safe_edit_message(
        callback,
        f"üß† <b>–§–£–¢–ë–û–õ–¨–ù–ê–Ø –ü–ê–ú–Ø–¢–¨</b> | –®–∞–≥ {current_step + 1}/4\n\n"
        f"üë®‚Äçüè´ <i>\"{success_phrase}\"</i>\n\n"
        f"<b>–ö–∞–∫–æ–π –±—ã–ª —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç?</b>",
        keyboard
    )

# 2. –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: –û–±–≤–æ–¥–∫–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤
async def start_dribbling_challenge(callback: CallbackQuery, state: FSMContext):
    """–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–∞ –æ–±–≤–æ–¥–∫—É —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤"""
    await state.update_data(
        dribble_round=1,
        dribble_reward=0
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –í–ª–µ–≤–æ", callback_data="dribble:left"),
            InlineKeyboardButton(text="‚¨ÜÔ∏è –ü—Ä—è–º–æ", callback_data="dribble:straight"),
            InlineKeyboardButton(text="‚û°Ô∏è –í–ø—Ä–∞–≤–æ", callback_data="dribble:right")
        ]
    ])
    
    await safe_edit_message(
        callback,
        f"üåÄ <b>–û–ë–í–û–î–ö–ê –°–û–ü–ï–†–ù–ò–ö–û–í</b>\n\n"
        f"üéØ <b>–ó–∞–¥–∞–Ω–∏–µ:</b> –û–±–≤–µ–¥–∏ –∑–∞—â–∏—Ç–Ω–∏–∫–∞ –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–π –º–æ–Ω–µ—Ç—ã!\n"
        f"üí∞ <b>–ù–∞–≥—Ä–∞–¥–∞:</b> 15 –º–æ–Ω–µ—Ç –∑–∞ –∫–∞–∂–¥–æ–≥–æ –æ–±–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –∑–∞—â–∏—Ç–Ω–∏–∫–∞\n\n"
        f"<i>–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ–±–≤–æ–¥–∫–∏. –ó–∞—â–∏—Ç–Ω–∏–∫ –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è —É–≥–∞–¥–∞—Ç—å —Ç–≤–æ—ë –¥–≤–∏–∂–µ–Ω–∏–µ!</i>\n\n"
        f"<b>–†–∞—É–Ω–¥ 1</b>\n"
        f"–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:",
        keyboard
    )
    
    await state.set_state(FootballTrainingStates.dribbling_challenge)

@router.callback_query(F.data.startswith("dribble:"), FootballTrainingStates.dribbling_challenge)
async def handle_dribble(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –≤ –æ–±–≤–æ–¥–∫–µ"""
    state_data = await state.get_data()
    round_num = state_data['dribble_round']
    current_reward = state_data['dribble_reward']
    
    player_move = callback.data.split(":")[1]
    defender_move = random.choice(["left", "straight", "right"])
    
    if player_move == defender_move:
        # –ó–∞—â–∏—Ç–Ω–∏–∫ —É–≥–∞–¥–∞–ª - –∏–≥—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è
        total_reward = current_reward + 15  # +15 –∑–∞ —Ç–µ–∫—É—â–∏–π —É—Å–ø–µ—à–Ω—ã–π —Ä–∞—É–Ω–¥
        await handle_training_success(
            callback, state, total_reward, 
            f"–û–±–≤—ë–ª {round_num} –∑–∞—â–∏—Ç–Ω–∏–∫–æ–≤! –ù–æ —Ç–µ–±—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏–ª–∏."
        )
        return
    
    # –£—Å–ø–µ—à–Ω–∞—è –æ–±–≤–æ–¥–∫–∞
    round_num += 1
    current_reward += 15
    
    await state.update_data(
        dribble_round=round_num,
        dribble_reward=current_reward
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –í–ª–µ–≤–æ", callback_data="dribble:left"),
            InlineKeyboardButton(text="‚¨ÜÔ∏è –ü—Ä—è–º–æ", callback_data="dribble:straight"),
            InlineKeyboardButton(text="‚û°Ô∏è –í–ø—Ä–∞–≤–æ", callback_data="dribble:right")
        ]
    ])
    
    move_translation = {
        "left": "–≤–ª–µ–≤–æ",
        "straight": "–ø—Ä—è–º–æ", 
        "right": "–≤–ø—Ä–∞–≤–æ"
    }
    
    await safe_edit_message(
        callback,
        f"üåÄ <b>–û–ë–í–û–î–ö–ê –°–û–ü–ï–†–ù–ò–ö–û–í</b>\n\n"
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢—ã –ø–æ—à—ë–ª {move_translation[player_move]}, "
        f"–∞ –∑–∞—â–∏—Ç–Ω–∏–∫ —É–≥–∞–¥–∞–ª {move_translation[defender_move]}!\n\n"
        f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {current_reward} –º–æ–Ω–µ—Ç\n"
        f"<b>–†–∞—É–Ω–¥ {round_num}</b>\n"
        f"–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:",
        keyboard
    )

async def handle_training_success(callback: CallbackQuery, state: FSMContext, reward: int, achievement: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    state_data = await state.get_data()
    user_id = callback.from_user.id
    drill_id = state_data['drill_id']
    
    # –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
    await update_user_balance(user_id, reward)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    await save_training_result(
        user_id=user_id,
        drill_type=drill_id,
        success=True,
        reward_earned=reward,
        level=1
    )
    
    user_info = await get_user_by_id(user_id)
    coach_phrase = random.choice(COACH_PHRASES['success'])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –µ—â—ë", callback_data="open_training")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="training_stats")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])
    
    await safe_edit_message(
        callback,
        f"üéâ <b>–¢–†–ï–ù–ò–†–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!</b>\n\n"
        f"üë®‚Äçüè´ <i>\"{coach_phrase}\"</i>\n\n"
        f"‚úÖ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ:</b> {achievement}\n"
        f"üí∞ <b>–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> +{reward} –º–æ–Ω–µ—Ç\n"
        f"üè¶ <b>–ë–∞–ª–∞–Ω—Å:</b> {user_info['balance']} –º–æ–Ω–µ—Ç\n\n"
        f"<i>–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!</i>",
        keyboard
    )
    
    await state.clear()

async def handle_training_failure(callback: CallbackQuery, state: FSMContext, reason: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    state_data = await state.get_data()
    user_id = callback.from_user.id
    drill_id = state_data['drill_id']
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ —É—Å–∏–ª–∏—è
    effort_reward = max(10, state_data['potential_reward'] // 3)
    await update_user_balance(user_id, effort_reward)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    await save_training_result(
        user_id=user_id,
        drill_type=drill_id,
        success=False,
        reward_earned=effort_reward,
        level=1
    )
    
    user_info = await get_user_by_id(user_id)
    coach_phrase = random.choice(COACH_PHRASES['failure'])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí™ –î—Ä—É–≥–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ", callback_data="open_training")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])
    
    await safe_edit_message(
        callback,
        f"üò¢ <b>–¢–†–ï–ù–ò–†–û–í–ö–ê –ù–ï –£–î–ê–õ–ê–°–¨</b>\n\n"
        f"üë®‚Äçüè´ <i>\"{coach_phrase}\"</i>\n\n"
        f"‚ùå <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}\n"
        f"üí∞ <b>–ó–∞ —É—Å–∏–ª–∏—è:</b> +{effort_reward} –º–æ–Ω–µ—Ç\n"
        f"üè¶ <b>–ë–∞–ª–∞–Ω—Å:</b> {user_info['balance']} –º–æ–Ω–µ—Ç\n\n"
        f"<i>–ù–µ —Å–¥–∞–≤–∞–π—Å—è! –ü—Ä–∞–∫—Ç–∏–∫–∞ –≤–µ–¥—ë—Ç –∫ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É!</i>",
        keyboard
    )
    
    await state.clear()

@router.callback_query(F.data == "cooldown_info")
async def show_cooldown_info(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    await callback.answer(
        "‚è≥ –≠—Ç–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –µ—â—ë –Ω–∞ –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–µ! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ.",
        show_alert=True
    )