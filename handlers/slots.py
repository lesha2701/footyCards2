from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import random
import asyncio
from datetime import datetime

from db.user_queries import get_user_by_id, update_user_balance
from db.game_queries import save_game_result, get_slot_machine_stats

router = Router()

class SlotMachineStates(StatesGroup):
    choosing_bet = State()
    spinning = State()
    result = State()

# –°—Ç–∞–≤–∫–∏ –¥–ª—è —Å–ª–æ—Ç–∞
SLOT_BET_AMOUNTS = [50, 100, 250, 500, 1000, 2500]

# –°–∏–º–≤–æ–ª—ã —Å–ª–æ—Ç–∞ (—Ñ—É—Ç–±–æ–ª—å–Ω–∞—è —Ç–µ–º–∞—Ç–∏–∫–∞)
SLOT_SYMBOLS = {
    '‚öΩ': {'name': '–ú—è—á', 'multiplier': 2},
    'ü•Ö': {'name': '–í–æ—Ä–æ—Ç–∞', 'multiplier': 3},
    'üëü': {'name': '–ë—É—Ç—Å–∞', 'multiplier': 4},
    'üèÜ': {'name': '–ö—É–±–æ–∫', 'multiplier': 5},
    'üéØ': {'name': '–ú–∏—à–µ–Ω—å', 'multiplier': 10},
    'üß§': {'name': '–ü–µ—Ä—á–∞—Ç–∫–∞', 'multiplier': 15},
    '‚≠ê': {'name': '–ó–≤–µ–∑–¥–∞', 'multiplier': 25},  # –î–∂–µ–∫–ø–æ—Ç —Å–∏–º–≤–æ–ª
}

# –ö–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∏ –º–Ω–æ–∂–∏—Ç–µ–ª–∏
COMBINATIONS = {
    '3x‚≠ê': {'multiplier': 100, 'name': '–î–ñ–ï–ö–ü–û–¢!'},
    '3xüéØ': {'multiplier': 20, 'name': '–°—É–ø–µ—Ä –≤—ã–∏–≥—Ä—ã—à!'},
    '3xüß§': {'multiplier': 15, 'name': '–û—Ç–ª–∏—á–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è!'},
    '3xüèÜ': {'multiplier': 10, 'name': '–û—Ç–ª–∏—á–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è!'},
    '3xüëü': {'multiplier': 8, 'name': '–•–æ—Ä–æ—à–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è!'},
    '3xü•Ö': {'multiplier': 6, 'name': '–•–æ—Ä–æ—à–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è!'},
    '3x‚öΩ': {'multiplier': 4, 'name': '–ù–µ–ø–ª–æ—Ö–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è!'},
    '2x‚≠ê': {'multiplier': 5, 'name': '–ë–æ–Ω—É—Å –∑–∞ –∑–≤–µ–∑–¥—ã!'},
    'any_2': {'multiplier': 2, 'name': '–ú–∞–ª—ã–π –≤—ã–∏–≥—Ä—ã—à!'},
}

# –§—Ä–∞–∑—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
SPIN_PHRASES = [
    "–ë–∞—Ä–∞–±–∞–Ω—ã –∫—Ä—É—Ç—è—Ç—Å—è... üé∞",
    "–°–∏–º–≤–æ–ª—ã –≤—ã—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è... üîÑ",
    "–£–¥–∞—á–∞ –Ω–∞ —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ! üçÄ",
    "–§—É—Ç–±–æ–ª—å–Ω–∞—è –º–∞–≥–∏—è –≤ –¥–µ–π—Å—Ç–≤–∏–∏! ‚öΩ",
    "–ü–æ–±–µ–¥–∞ —É–∂–µ –±–ª–∏–∑–∫–æ! üèÜ",
    "–°–µ–∫—É–Ω–¥–æ—á–∫—É, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç... ‚è≥"
]

async def safe_edit_message(callback: CallbackQuery, text: str, reply_markup=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await callback.message.edit_text(text, reply_markup=reply_markup, parse_mode="HTML")
    except:
        pass

async def show_slot_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã"""
    user_id = callback.from_user.id
    stats = await get_slot_machine_stats(user_id)
    
    stats_text = (
        f"üé∞ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –°–ª–æ—Ç-–ú–∞—à–∏–Ω—ã</b>\n\n"
        f"<blockquote>üéØ –í—Å–µ–≥–æ —Å–ø–∏–Ω–æ–≤: {stats['total_games']}\n"
        f"‚úÖ –í—ã–∏–≥—Ä—ã—à–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤: {stats['wins']}\n"
        f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {stats['win_percentage']}%\n"
        f"üí∞ –î–∂–µ–∫–ø–æ—Ç–æ–≤: {stats['jackpots']}</blockquote>\n\n"
        f"<blockquote>üèÜ –°–∞–º—ã–π –±–æ–ª—å—à–æ–π –≤—ã–∏–≥—Ä—ã—à: {stats['biggest_win']} –º–æ–Ω–µ—Ç\n"
        f"üí∏ –û–±—â–∏–π –≤—ã–∏–≥—Ä—ã—à: {stats['total_win']} –º–æ–Ω–µ—Ç\n"
        f"üé´ –û–±—â–∏–µ —Å—Ç–∞–≤–∫–∏: {stats['total_bet']} –º–æ–Ω–µ—Ç\n"
        f"üíµ –ü—Ä–∏–±—ã–ª—å: {stats['profit']} –º–æ–Ω–µ—Ç</blockquote>\n\n"
        f"üéÆ <i>–£–¥–∞—á–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–ø–∏–Ω–µ! –ú–æ–∂–µ—Ç, –∏–º–µ–Ω–Ω–æ —Ç—ã —Å–æ—Ä–≤—ë—à—å –¥–∂–µ–∫–ø–æ—Ç!</i> üí´"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∞–≤—Ç–æ–º–∞—Ç—É", callback_data="back_to_slots")]
    ])
    
    await safe_edit_message(callback, stats_text, keyboard)

@router.callback_query(F.data == "slot_stats")
async def handle_slot_stats(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–ª–æ—Ç–æ–≤"""
    await show_slot_stats(callback)

@router.callback_query(F.data == "back_to_slots")
async def back_to_slots(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ª–æ—Ç-–º–∞—à–∏–Ω–µ –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    await start_slot_machine(callback, state)

@router.callback_query(F.data == "open_slots")
async def start_slot_machine(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã –≤ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—É"""
    user_id = callback.from_user.id
    user = await get_user_by_id(user_id)
    
    if user['balance'] < min(SLOT_BET_AMOUNTS):
        await callback.answer(
            f"üé∞ –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {min(SLOT_BET_AMOUNTS)} –º–æ–Ω–µ—Ç –¥–ª—è –∏–≥—Ä—ã!",
            show_alert=True
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞–≤–æ–∫
    bet_buttons = []
    for amount in SLOT_BET_AMOUNTS:
        if user['balance'] >= amount:
            bet_buttons.append([InlineKeyboardButton(
                text=f"üé∞ –°—Ç–∞–≤–∫–∞: {amount} –º–æ–Ω–µ—Ç",
                callback_data=f"slot_bet:{amount}"
            )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –Ω–∞–∑–∞–¥
    bet_buttons.append([
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="slot_stats"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=bet_buttons)
    
    await safe_edit_message(
        callback,
        f"üé∞ <b>–§–£–¢–ë–û–õ–¨–ù–´–ô –°–õ–û–¢-–ê–í–¢–û–ú–ê–¢</b>\n\n"
        f"‚öΩ <b>–°–∏–º–≤–æ–ª—ã –∏ –º–Ω–æ–∂–∏—Ç–µ–ª–∏:</b>\n"
        f"<blockquote>‚öΩ –ú—è—á - x{SLOT_SYMBOLS['‚öΩ']['multiplier']}\n"
        f"ü•Ö –í–æ—Ä–æ—Ç–∞ - x{SLOT_SYMBOLS['ü•Ö']['multiplier']}\n"
        f"üëü –ë—É—Ç—Å–∞ - x{SLOT_SYMBOLS['üëü']['multiplier']}\n"
        f"üèÜ –ö—É–±–æ–∫ - x{SLOT_SYMBOLS['üèÜ']['multiplier']}\n"
        f"üéØ –ú–∏—à–µ–Ω—å - x{SLOT_SYMBOLS['üéØ']['multiplier']}\n"
        f"üß§ –ü–µ—Ä—á–∞—Ç–∫–∞ - x{SLOT_SYMBOLS['üß§']['multiplier']}\n"
        f"‚≠ê –ó–≤–µ–∑–¥–∞ - x{SLOT_SYMBOLS['‚≠ê']['multiplier']} (–î–∂–µ–∫–ø–æ—Ç!)</blockquote>\n\n"
        f"üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {user['balance']} –º–æ–Ω–µ—Ç\n\n"
        f"<i>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏:</i>",
        keyboard
    )
    
    await state.set_state(SlotMachineStates.choosing_bet)

@router.callback_query(F.data.startswith("slot_bet:"))
async def set_slot_bet(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞–≤–∫–∏ –∏ –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã"""
    bet_amount = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    
    user_info = await get_user_by_id(user_id)
    if user_info['balance'] < bet_amount:
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!", show_alert=True)
        return
    
    # –°–Ω–∏–º–∞–µ–º —Å—Ç–∞–≤–∫—É
    await update_user_balance(user_id, -bet_amount)
    
    await state.update_data(bet_amount=bet_amount)
    
    await safe_edit_message(
        callback,
        f"üé∞ <b>–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: {bet_amount} –º–æ–Ω–µ—Ç</b>\n\n"
        f"<i>–ì–æ—Ç–æ–≤—å—Å—è –∫ –≤—Ä–∞—â–µ–Ω–∏—é –±–∞—Ä–∞–±–∞–Ω–æ–≤...</i>"
    )
    
    await asyncio.sleep(1)
    await spin_slots(callback, state)

async def spin_slots(callback: CallbackQuery, state: FSMContext):
    """–ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è —Å–ª–æ—Ç–æ–≤"""
    state_data = await state.get_data()
    bet_amount = state_data['bet_amount']
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
    symbols = list(SLOT_SYMBOLS.keys())
    final_reels = [
        random.choice(symbols),
        random.choice(symbols),
        random.choice(symbols)
    ]
    
    # –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è
    for i in range(8):  # 8 –∫–∞–¥—Ä–æ–≤ –∞–Ω–∏–º–∞—Ü–∏–∏
        spinning_reels = [
            random.choice(symbols),
            random.choice(symbols),
            random.choice(symbols)
        ]
        
        # –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –∑–∞–º–µ–¥–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        if i > 5:
            spinning_reels[0] = final_reels[0]
        if i > 6:
            spinning_reels[1] = final_reels[1]
        if i > 7:
            spinning_reels[2] = final_reels[2]
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
        spin_text = (
            f"üé∞ <b>–°–õ–û–¢-–ê–í–¢–û–ú–ê–¢</b> | –°—Ç–∞–≤–∫–∞: {bet_amount} –º–æ–Ω–µ—Ç\n\n"
            f"‚îÇ {spinning_reels[0]} ‚îÇ {spinning_reels[1]} ‚îÇ {spinning_reels[2]} ‚îÇ\n\n"
            f"<i>{random.choice(SPIN_PHRASES)}</i>"
        )
        
        await safe_edit_message(callback, spin_text)
        await asyncio.sleep(0.3 + i * 0.1)  # –ó–∞–º–µ–¥–ª—è–µ–º—Å—è
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await show_result(callback, state, final_reels)

async def show_result(callback: CallbackQuery, state: FSMContext, reels: list):
    """–ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –ø–æ–¥—Å—á–µ—Ç –≤—ã–∏–≥—Ä—ã—à–∞"""
    state_data = await state.get_data()
    bet_amount = state_data['bet_amount']
    user_id = callback.from_user.id
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
    win_amount = 0
    result_type = "lose"
    combo_name = ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    if reels[0] == reels[1] == reels[2]:
        # –í—Å–µ —Ç—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
        symbol = reels[0]
        multiplier = SLOT_SYMBOLS[symbol]['multiplier']
        win_amount = bet_amount * multiplier
        combo_name = f"3x{symbol}"
        result_type = "jackpot" if symbol == "‚≠ê" else "win"
        
    elif reels[0] == reels[1] or reels[1] == reels[2] or reels[0] == reels[2]:
        # –î–≤–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
        if "‚≠ê" in reels and reels.count("‚≠ê") == 2:
            # –î–≤–µ –∑–≤–µ–∑–¥—ã
            win_amount = bet_amount * COMBINATIONS['2x‚≠ê']['multiplier']
            combo_name = "2x‚≠ê"
        else:
            # –õ—é–±—ã–µ –¥–≤–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
            win_amount = bet_amount * COMBINATIONS['any_2']['multiplier']
            combo_name = "–î–≤–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ"
        result_type = "win"
    
    # –ù–∞—á–∏—Å–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à
    if win_amount > 0:
        await update_user_balance(user_id, win_amount)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã (–±–µ–∑ additional_data)
    await save_game_result(
        user_id=user_id,
        game_type="slot_machine",
        result=result_type,
        bet_amount=bet_amount,
        win_amount=win_amount,
        player_score=0,
        opponent_score=0
    )
    
    user_info = await get_user_by_id(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    result_text = ""
    if win_amount > 0:
        if result_type == "jackpot":
            result_text = f"üéâ <b>–î–ñ–ï–ö–ü–û–¢!!!</b> üéâ\n+{win_amount} –º–æ–Ω–µ—Ç!"
        else:
            result_text = f"üéä <b>–í–´–ò–ì–†–´–®!</b> +{win_amount} –º–æ–Ω–µ—Ç!"
    else:
        result_text = "üò¢ <b>–ü–†–û–ò–ì–†–´–®</b>\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé∞ –ö—Ä—É—Ç–∏—Ç—å –µ—â—ë —Ä–∞–∑", callback_data=f"slot_bet:{bet_amount}")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="slot_stats")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")],
    ])
    
    await safe_edit_message(
        callback,
        f"üé∞ <b>–†–ï–ó–£–õ–¨–¢–ê–¢</b> | –°—Ç–∞–≤–∫–∞: {bet_amount} –º–æ–Ω–µ—Ç\n\n"
        f"‚îÇ {reels[0]} ‚îÇ {reels[1]} ‚îÇ {reels[2]} ‚îÇ\n\n"
        f"{result_text}\n\n"
        f"üíé <b>–ö–æ–º–±–∏–Ω–∞—Ü–∏—è:</b> {combo_name if combo_name else '–ù–µ—Ç –≤—ã–∏–≥—Ä—ã—à–∞'}\n"
        f"üè¶ –ë–∞–ª–∞–Ω—Å: <b>{user_info['balance']} –º–æ–Ω–µ—Ç</b>\n\n"
        f"<i>–£–¥–∞—á–∞ –ª—é–±–∏—Ç —Å–º–µ–ª—ã—Ö! üçÄ</i>",
        keyboard
    )
    
    await state.set_state(SlotMachineStates.result)

@router.callback_query(F.data.startswith("slot_bet:"), SlotMachineStates.result)
async def spin_again(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Å–ø–∏–Ω —Å —Ç–æ–π –∂–µ —Å—Ç–∞–≤–∫–æ–π"""
    bet_amount = int(callback.data.split(":")[1])
    user_id = callback.from_user.id
    
    user_info = await get_user_by_id(user_id)
    if user_info['balance'] < bet_amount:
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!", show_alert=True)
        return
    
    # –°–Ω–∏–º–∞–µ–º —Å—Ç–∞–≤–∫—É
    await update_user_balance(user_id, -bet_amount)
    
    await state.update_data(bet_amount=bet_amount)
    await spin_slots(callback, state)